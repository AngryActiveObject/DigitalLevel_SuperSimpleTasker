
STM32_SST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000436c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004538  08004538  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004540  08004540  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000240  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000024c  2000024c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d5f1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000248f  00000000  00000000  0002d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e30  00000000  00000000  0002fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ada  00000000  00000000  00030930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021c65  00000000  00000000  0003140a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001055f  00000000  00000000  0005306f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc39b  00000000  00000000  000635ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003a5c  00000000  00000000  0012f96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001333c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044dc 	.word	0x080044dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080044dc 	.word	0x080044dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LIS3DSH_ctor>:

static void LIS3DSH_txrx_SPI(LIS3DSH_task_t *const me, uint8_t *txData,
		uint16_t len);
/*public function declarations*/
void LIS3DSH_ctor(LIS3DSH_task_t *me, SST_Task const *const SPIDeviceAO,
		GPIO_TypeDef *pcsGPIOPort, uint16_t csGPIOPin) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	807b      	strh	r3, [r7, #2]

	SST_Task_ctor(&(me->super), (SST_Handler) &LIS3DSH_init_Handler,
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	4a27      	ldr	r2, [pc, #156]	; (8000574 <LIS3DSH_ctor+0xb0>)
 80004d6:	4928      	ldr	r1, [pc, #160]	; (8000578 <LIS3DSH_ctor+0xb4>)
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 f816 	bl	800150a <SST_Task_ctor>
			(SST_Handler) &LIS3DSH_task_Handler);

	SST_TimeEvt_ctor(&(me->pollTimer), LIS3DSH_POLL_SIG, &(me->super));
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	331c      	adds	r3, #28
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	2104      	movs	r1, #4
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 f894 	bl	8001614 <SST_TimeEvt_ctor>

	/*link in SPI device and setup the txrx transaction event used for comms*/
	me->SPIDeviceAO = SPIDeviceAO;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	68ba      	ldr	r2, [r7, #8]
 80004f0:	62da      	str	r2, [r3, #44]	; 0x2c
	me->TxRxTransactionEvent.super.sig = SPI_TXRXREQ_SIG;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2201      	movs	r2, #1
 80004f6:	871a      	strh	r2, [r3, #56]	; 0x38
	me->TxRxTransactionEvent.pJob = &(me->TxRxTransactionJob);
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	63da      	str	r2, [r3, #60]	; 0x3c
	me->TxRxTransactionJob.csGPIOPin = csGPIOPin;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	887a      	ldrh	r2, [r7, #2]
 8000506:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	me->TxRxTransactionJob.pcsGPIOPort = pcsGPIOPort;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	64da      	str	r2, [r3, #76]	; 0x4c
	me->TxRxTransactionJob.pAOrequester = (SST_Task const*) &(me->super);
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	641a      	str	r2, [r3, #64]	; 0x40
	me->TxRxTransactionJob.rxData = (me->spiRxBuffer); /*internal link to buffer*/
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	649a      	str	r2, [r3, #72]	; 0x48
	me->TxRxTransactionJob.txData = (me->spiTxBuffer);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	645a      	str	r2, [r3, #68]	; 0x44
	me->TxRxTransactionJob.lenData = 0u; /*no data for now*/
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2200      	movs	r2, #0
 800052e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	me->TxRxTransactionJob.timeoutCnt_ms = LIS3DSH_DEFAULT_TIMEOUT_MS; /* default SPI timout*/
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	220a      	movs	r2, #10
 8000536:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	/*initial state of the device is initialising*/
	me->DrvrState = LIS3DSH_INITIALISING;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2200      	movs	r2, #0
 800053e:	761a      	strb	r2, [r3, #24]
	me->initStage = 1; /*initial stage is one as the first stage is always performed in init handler*/
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	2201      	movs	r2, #1
 8000544:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	me->initAttempts = 0;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

	me->ctrlReg4 = LIS3DSH_ODR_100Hz << LIS3DSH_CTRL4_ODR_POS;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2260      	movs	r2, #96	; 0x60
 8000554:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	me->ctrlReg4 |= LIS3DSH_CTRL4_XEN_MSK | LIS3DSH_CTRL4_YEN_MSK
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800055e:	f043 0307 	orr.w	r3, r3, #7
 8000562:	b2da      	uxtb	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
			| LIS3DSH_CTRL4_ZEN_MSK;
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	080005d5 	.word	0x080005d5
 8000578:	080005bb 	.word	0x080005bb

0800057c <LIS3DSH_get_accel_xyz>:

LIS3DSH_Results_t LIS3DSH_get_accel_xyz(LIS3DSH_task_t * me)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	LIS3DSH_Results_t results;
	results.x_g = me->Results.x_g;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800058c:	813b      	strh	r3, [r7, #8]
	results.y_g = me->Results.y_g;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8000594:	817b      	strh	r3, [r7, #10]
	results.z_g = me->Results.z_g;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800059c:	81bb      	strh	r3, [r7, #12]
	return results;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	461a      	mov	r2, r3
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	6010      	str	r0, [r2, #0]
 80005aa:	889b      	ldrh	r3, [r3, #4]
 80005ac:	8093      	strh	r3, [r2, #4]
}
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <LIS3DSH_init_Handler>:

/*private function declarations*/
static void LIS3DSH_init_Handler(LIS3DSH_task_t *const me,
		SST_Evt const *const ie) {
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
	(void) ie;
	LIS3DSH_init_stage0(me);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 f86f 	bl	80006a8 <LIS3DSH_init_stage0>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <LIS3DSH_task_Handler>:

static void LIS3DSH_task_Handler(LIS3DSH_task_t *const me,
		SST_Evt const *const e) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	/*state driven switch, event signal is checked in each state.*/
	switch (me->DrvrState) {
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7e1b      	ldrb	r3, [r3, #24]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d81e      	bhi.n	8000624 <LIS3DSH_task_Handler+0x50>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <LIS3DSH_task_Handler+0x18>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	080005fd 	.word	0x080005fd
 80005f0:	08000607 	.word	0x08000607
 80005f4:	08000611 	.word	0x08000611
 80005f8:	0800061b 	.word	0x0800061b
	case LIS3DSH_INITIALISING: {
		LIS3DSH_initialising_Handler(me, e);
 80005fc:	6839      	ldr	r1, [r7, #0]
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f81c 	bl	800063c <LIS3DSH_initialising_Handler>
		break;
 8000604:	e013      	b.n	800062e <LIS3DSH_task_Handler+0x5a>
	}
	case LIS3DSH_IDLE: {
		LIS3DSH_idle_Handler(me, e);
 8000606:	6839      	ldr	r1, [r7, #0]
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f8b1 	bl	8000770 <LIS3DSH_idle_Handler>
		break;
 800060e:	e00e      	b.n	800062e <LIS3DSH_task_Handler+0x5a>
	}
	case LIS3DSH_READING: {
		LIS3DSH_reading_Handler(me, e);
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f8e0 	bl	80007d8 <LIS3DSH_reading_Handler>
		break;
 8000618:	e009      	b.n	800062e <LIS3DSH_task_Handler+0x5a>
	}
	case LIS3DSH_FAULT: {
		LIS3DSH_fault_Handler(me, e);
 800061a:	6839      	ldr	r1, [r7, #0]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f92f 	bl	8000880 <LIS3DSH_fault_Handler>
		break;
 8000622:	e004      	b.n	800062e <LIS3DSH_task_Handler+0x5a>
	}
	default: {
		DBC_ERROR(100);
 8000624:	2164      	movs	r1, #100	; 0x64
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <LIS3DSH_task_Handler+0x64>)
 8000628:	f000 fb40 	bl	8000cac <DBC_fault_handler>
		break;
 800062c:	bf00      	nop
	}
	}
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	080044f4 	.word	0x080044f4

0800063c <LIS3DSH_initialising_Handler>:

static void LIS3DSH_initialising_Handler(LIS3DSH_task_t *const me,
		SST_Evt const *const e) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	switch (e->sig) {
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d025      	beq.n	800069a <LIS3DSH_initialising_Handler+0x5e>
 800064e:	2b04      	cmp	r3, #4
 8000650:	dc1e      	bgt.n	8000690 <LIS3DSH_initialising_Handler+0x54>
 8000652:	2b02      	cmp	r3, #2
 8000654:	d002      	beq.n	800065c <LIS3DSH_initialising_Handler+0x20>
 8000656:	2b03      	cmp	r3, #3
 8000658:	d016      	beq.n	8000688 <LIS3DSH_initialising_Handler+0x4c>
 800065a:	e019      	b.n	8000690 <LIS3DSH_initialising_Handler+0x54>
	case SPI_TXRXCOMPLETE_SIG: {
		switch (me->initStage) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000662:	2b01      	cmp	r3, #1
 8000664:	d002      	beq.n	800066c <LIS3DSH_initialising_Handler+0x30>
 8000666:	2b02      	cmp	r3, #2
 8000668:	d004      	beq.n	8000674 <LIS3DSH_initialising_Handler+0x38>
 800066a:	e007      	b.n	800067c <LIS3DSH_initialising_Handler+0x40>
		case 1: {
			/*call a read of the control register to check it has been written*/
			LIS3DSH_init_stage1(me);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f837 	bl	80006e0 <LIS3DSH_init_stage1>
			break;
 8000672:	e008      	b.n	8000686 <LIS3DSH_initialising_Handler+0x4a>
		}
		case 2: {
			/*verify the register is as expected, otherwise retry*/
			LIS3DSH_init_stage2(me);
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f848 	bl	800070a <LIS3DSH_init_stage2>
			break;
 800067a:	e004      	b.n	8000686 <LIS3DSH_initialising_Handler+0x4a>
		}
		default: {
			DBC_ERROR(200);
 800067c:	21c8      	movs	r1, #200	; 0xc8
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <LIS3DSH_initialising_Handler+0x68>)
 8000680:	f000 fb14 	bl	8000cac <DBC_fault_handler>
			break;
 8000684:	bf00      	nop
		}
		}
		break;
 8000686:	e009      	b.n	800069c <LIS3DSH_initialising_Handler+0x60>
	}
	case SPI_TIMEOUT_SIG: {
		LIS3DSH_fault_enter(me);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f904 	bl	8000896 <LIS3DSH_fault_enter>
		break;
 800068e:	e005      	b.n	800069c <LIS3DSH_initialising_Handler+0x60>
	case LIS3DSH_POLL_SIG: {
		/*if we get a polling signal in initialisation just ignore it*/
		break;
	}
	default: {
		DBC_ERROR(210);
 8000690:	21d2      	movs	r1, #210	; 0xd2
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <LIS3DSH_initialising_Handler+0x68>)
 8000694:	f000 fb0a 	bl	8000cac <DBC_fault_handler>
		break;
 8000698:	e000      	b.n	800069c <LIS3DSH_initialising_Handler+0x60>
		break;
 800069a:	bf00      	nop
	}
	}
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	080044f4 	.word	0x080044f4

080006a8 <LIS3DSH_init_stage0>:

static void LIS3DSH_init_stage0(LIS3DSH_task_t *const me) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	/*write control registers configuration to the device*/
	uint8_t spiTxBuffer[] = { LIS3DSH_CTRL4, me->ctrlReg4 };
 80006b0:	2320      	movs	r3, #32
 80006b2:	733b      	strb	r3, [r7, #12]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80006ba:	737b      	strb	r3, [r7, #13]
	me->DrvrState = LIS3DSH_INITIALISING;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	761a      	strb	r2, [r3, #24]
	me->initStage = 1;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	LIS3DSH_txrx_SPI(me, spiTxBuffer, sizeof(spiTxBuffer));
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2202      	movs	r2, #2
 80006d0:	4619      	mov	r1, r3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f8f8 	bl	80008c8 <LIS3DSH_txrx_SPI>
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <LIS3DSH_init_stage1>:

static void LIS3DSH_init_stage1(LIS3DSH_task_t *const me) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	/*call a read of the control register to check it has been written*/
	me->initStage = 2;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2202      	movs	r2, #2
 80006ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	uint8_t spiTxBuffer[] = { LIS3DSH_READ | LIS3DSH_CTRL4, 0x00u };
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	81bb      	strh	r3, [r7, #12]
	LIS3DSH_txrx_SPI(me, spiTxBuffer, sizeof(spiTxBuffer));
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2202      	movs	r2, #2
 80006fa:	4619      	mov	r1, r3
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f8e3 	bl	80008c8 <LIS3DSH_txrx_SPI>
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <LIS3DSH_init_stage2>:

static void LIS3DSH_init_stage2(LIS3DSH_task_t *const me) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	/*check read back register is equal to the desired config*/
	if (me->spiRxBuffer[1] == me->ctrlReg4) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800071e:	429a      	cmp	r2, r3
 8000720:	d10a      	bne.n	8000738 <LIS3DSH_init_stage2+0x2e>
		/*initialisation complete*/
		me->DrvrState = LIS3DSH_IDLE; /*move to idle state*/
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2201      	movs	r2, #1
 8000726:	761a      	strb	r2, [r3, #24]
		SST_TimeEvt_arm(&(me->pollTimer), LIS3DSH_POLL_MS, LIS3DSH_POLL_MS); /*arm the timer to start polling data*/
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	331c      	adds	r3, #28
 800072c:	2205      	movs	r2, #5
 800072e:	2105      	movs	r1, #5
 8000730:	4618      	mov	r0, r3
 8000732:	f000 ff91 	bl	8001658 <SST_TimeEvt_arm>
			LIS3DSH_fault_enter(me);
		} else {
			LIS3DSH_init_stage0(me); /*try again*/
		}
	}
}
 8000736:	e017      	b.n	8000768 <LIS3DSH_init_stage2+0x5e>
		me->initStage = 0;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		me->initAttempts++;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000746:	3301      	adds	r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		if (me->initAttempts >= LIS3DSH_MAX_INIT_ATTEMPTS) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000756:	2b02      	cmp	r3, #2
 8000758:	d903      	bls.n	8000762 <LIS3DSH_init_stage2+0x58>
			LIS3DSH_fault_enter(me);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f89b 	bl	8000896 <LIS3DSH_fault_enter>
}
 8000760:	e002      	b.n	8000768 <LIS3DSH_init_stage2+0x5e>
			LIS3DSH_init_stage0(me); /*try again*/
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ffa0 	bl	80006a8 <LIS3DSH_init_stage0>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <LIS3DSH_idle_Handler>:

static void LIS3DSH_idle_Handler(LIS3DSH_task_t *const me,
		SST_Evt const *const e) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	switch (e->sig) {
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	2b04      	cmp	r3, #4
 8000780:	d009      	beq.n	8000796 <LIS3DSH_idle_Handler+0x26>
 8000782:	2b04      	cmp	r3, #4
 8000784:	dc1b      	bgt.n	80007be <LIS3DSH_idle_Handler+0x4e>
 8000786:	2b02      	cmp	r3, #2
 8000788:	d01e      	beq.n	80007c8 <LIS3DSH_idle_Handler+0x58>
 800078a:	2b03      	cmp	r3, #3
 800078c:	d117      	bne.n	80007be <LIS3DSH_idle_Handler+0x4e>
		/*shouldn't get a complete signal in idle state*/
		break;
	}
	case SPI_TIMEOUT_SIG: {
		/*shouldn't get a timeout signal in idle handler*/
		LIS3DSH_fault_enter(me);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f881 	bl	8000896 <LIS3DSH_fault_enter>
		break;
 8000794:	e019      	b.n	80007ca <LIS3DSH_idle_Handler+0x5a>
	}
	case LIS3DSH_POLL_SIG: {
		/*trigger a new request for data to the device*/
		/*txrx 7 bytes ( 1 for read instruction 6 more to get the 6 result registers into read buffer*/
		me->DrvrState = LIS3DSH_READING; /*enter the reading state*/
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2202      	movs	r2, #2
 800079a:	761a      	strb	r2, [r3, #24]
		uint8_t spiTxBuffer[7] = { LIS3DSH_READ | LIS3DSH_OUT_X_L };
 800079c:	23a8      	movs	r3, #168	; 0xa8
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2100      	movs	r1, #0
 80007a6:	460a      	mov	r2, r1
 80007a8:	801a      	strh	r2, [r3, #0]
 80007aa:	460a      	mov	r2, r1
 80007ac:	709a      	strb	r2, [r3, #2]
		LIS3DSH_txrx_SPI(me, spiTxBuffer, sizeof(spiTxBuffer));
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2207      	movs	r2, #7
 80007b4:	4619      	mov	r1, r3
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f886 	bl	80008c8 <LIS3DSH_txrx_SPI>
		break;
 80007bc:	e005      	b.n	80007ca <LIS3DSH_idle_Handler+0x5a>
	}
	default: {
		DBC_ERROR(210);
 80007be:	21d2      	movs	r1, #210	; 0xd2
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <LIS3DSH_idle_Handler+0x64>)
 80007c2:	f000 fa73 	bl	8000cac <DBC_fault_handler>
		break;
 80007c6:	e000      	b.n	80007ca <LIS3DSH_idle_Handler+0x5a>
		break;
 80007c8:	bf00      	nop
	}
	}

}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	080044f4 	.word	0x080044f4

080007d8 <LIS3DSH_reading_Handler>:

static void LIS3DSH_reading_Handler(LIS3DSH_task_t *const me,
		SST_Evt const *const e) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	switch (e->sig) {
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d043      	beq.n	8000872 <LIS3DSH_reading_Handler+0x9a>
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	dc3c      	bgt.n	8000868 <LIS3DSH_reading_Handler+0x90>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d002      	beq.n	80007f8 <LIS3DSH_reading_Handler+0x20>
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d034      	beq.n	8000860 <LIS3DSH_reading_Handler+0x88>
 80007f6:	e037      	b.n	8000868 <LIS3DSH_reading_Handler+0x90>
	case SPI_TXRXCOMPLETE_SIG: {

		me->Results.x_g = 0;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	861a      	strh	r2, [r3, #48]	; 0x30
		me->Results.x_g = (int16_t) (me->spiRxBuffer[2] << 8
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	b21a      	sxth	r2, r3
				| me->spiRxBuffer[1]);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800080e:	b21b      	sxth	r3, r3
		me->Results.x_g = (int16_t) (me->spiRxBuffer[2] << 8
 8000810:	4313      	orrs	r3, r2
 8000812:	b21a      	sxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	861a      	strh	r2, [r3, #48]	; 0x30

		me->Results.y_g = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	865a      	strh	r2, [r3, #50]	; 0x32
		me->Results.y_g = (int16_t) (me->spiRxBuffer[4] << 8
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
				| me->spiRxBuffer[3]);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800082e:	b21b      	sxth	r3, r3
		me->Results.y_g = (int16_t) (me->spiRxBuffer[4] << 8
 8000830:	4313      	orrs	r3, r2
 8000832:	b21a      	sxth	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	865a      	strh	r2, [r3, #50]	; 0x32

		me->Results.z_g = 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	869a      	strh	r2, [r3, #52]	; 0x34
		me->Results.z_g = (int16_t) (me->spiRxBuffer[6] << 8
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8000844:	021b      	lsls	r3, r3, #8
 8000846:	b21a      	sxth	r2, r3
				| me->spiRxBuffer[5]);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800084e:	b21b      	sxth	r3, r3
		me->Results.z_g = (int16_t) (me->spiRxBuffer[6] << 8
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	869a      	strh	r2, [r3, #52]	; 0x34

		me->DrvrState = LIS3DSH_IDLE;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2201      	movs	r2, #1
 800085c:	761a      	strb	r2, [r3, #24]

		break;
 800085e:	e009      	b.n	8000874 <LIS3DSH_reading_Handler+0x9c>
	}
	case SPI_TIMEOUT_SIG: {
		/*shouldn't get a timeout signal in idle handler*/
		LIS3DSH_fault_enter(me);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 f818 	bl	8000896 <LIS3DSH_fault_enter>
		break;
 8000866:	e005      	b.n	8000874 <LIS3DSH_reading_Handler+0x9c>
		/*shouldn't get a complete signal in idle state unless read is extremely slow.
		 * ignore this request and wait for timeout from SPI*/
		break;
	}
	default: {
		DBC_ERROR(210);
 8000868:	21d2      	movs	r1, #210	; 0xd2
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <LIS3DSH_reading_Handler+0xa4>)
 800086c:	f000 fa1e 	bl	8000cac <DBC_fault_handler>
		break;
 8000870:	e000      	b.n	8000874 <LIS3DSH_reading_Handler+0x9c>
		break;
 8000872:	bf00      	nop
	}
	}
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	080044f4 	.word	0x080044f4

08000880 <LIS3DSH_fault_Handler>:

static void LIS3DSH_fault_Handler(LIS3DSH_task_t *const me,
		SST_Evt const *const e) {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	/*do nothing*/
	(void) me;
	(void) e;
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <LIS3DSH_fault_enter>:

static void LIS3DSH_fault_enter(LIS3DSH_task_t *const me) {
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	me->DrvrState = LIS3DSH_FAULT;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2203      	movs	r2, #3
 80008a2:	761a      	strb	r2, [r3, #24]
	me->Results.x_g = 0;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	861a      	strh	r2, [r3, #48]	; 0x30
	me->Results.y_g = 0;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	865a      	strh	r2, [r3, #50]	; 0x32
	me->Results.z_g = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	869a      	strh	r2, [r3, #52]	; 0x34
	SST_TimeEvt_disarm(&(me->pollTimer));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	331c      	adds	r3, #28
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fee2 	bl	8001684 <SST_TimeEvt_disarm>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <LIS3DSH_txrx_SPI>:

static void LIS3DSH_txrx_SPI(LIS3DSH_task_t *const me, uint8_t *txData,
		uint16_t len) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	4613      	mov	r3, r2
 80008d4:	80fb      	strh	r3, [r7, #6]
	/**@pre whenever this is called the LIS3DSH handler cannot call it again
	 *  until a response has been received from the SPI_manager because the
	 *   buffer is used by the spi device until complete*/

	me->TxRxTransactionJob.lenData = len;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	88fa      	ldrh	r2, [r7, #6]
 80008da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	/*write tx data into tx buffer and clear out receipt buffer*/
	for (uint32_t i = 0; i < len; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e012      	b.n	800090a <LIS3DSH_txrx_SPI+0x42>
		me->spiTxBuffer[i] = txData[i];
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	7819      	ldrb	r1, [r3, #0]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	4413      	add	r3, r2
 80008f2:	3358      	adds	r3, #88	; 0x58
 80008f4:	460a      	mov	r2, r1
 80008f6:	701a      	strb	r2, [r3, #0]
		me->spiRxBuffer[i] = 0;
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	4413      	add	r3, r2
 80008fe:	3368      	adds	r3, #104	; 0x68
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++) {
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	429a      	cmp	r2, r3
 8000910:	d3e8      	bcc.n	80008e4 <LIS3DSH_txrx_SPI+0x1c>
	}
	SPIManager_post_txrx_Request((SST_Task* const ) me->SPIDeviceAO,
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3338      	adds	r3, #56	; 0x38
 800091a:	4619      	mov	r1, r3
 800091c:	4610      	mov	r0, r2
 800091e:	f000 fc67 	bl	80011f0 <SPIManager_post_txrx_Request>
			&(me->TxRxTransactionEvent));
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <Blinky_ctor>:
/*blinky task*/

static void Blinky_initHandler(BlinkyTask_T *const me, SST_Evt const *const ie);
static void Blinky_taskHandler(BlinkyTask_T *const me, SST_Evt const *const e);

void Blinky_ctor(BlinkyTask_T * me) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

	SST_Task_ctor(&(me->super), (SST_Handler) &Blinky_initHandler,
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <Blinky_ctor+0x2c>)
 8000938:	4908      	ldr	r1, [pc, #32]	; (800095c <Blinky_ctor+0x30>)
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fde5 	bl	800150a <SST_Task_ctor>
			(SST_Handler) &Blinky_taskHandler);

	SST_TimeEvt_ctor(&(me->blinkyTimer), BLINKYTIMER, &(me->super));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3318      	adds	r3, #24
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fe63 	bl	8001614 <SST_TimeEvt_ctor>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	08000981 	.word	0x08000981
 800095c:	08000961 	.word	0x08000961

08000960 <Blinky_initHandler>:

void Blinky_initHandler(BlinkyTask_T *const me, SST_Evt const *const ie) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	(void) ie;
	SST_TimeEvt_arm(&(me->blinkyTimer), 1u, 50);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3318      	adds	r3, #24
 800096e:	2232      	movs	r2, #50	; 0x32
 8000970:	2101      	movs	r1, #1
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fe70 	bl	8001658 <SST_TimeEvt_arm>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <Blinky_taskHandler>:


/*Blinky task uses a timer event to toggle the brightness of the red led every 1s*/
#define DUTYHIGH (750)
#define DUTYLOW (250)
void Blinky_taskHandler(BlinkyTask_T *const me, SST_Evt const *const e) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]

	(void)me;

	switch (e->sig) {
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d14b      	bne.n	8000a2a <Blinky_taskHandler+0xaa>
	case BLINKYTIMER: {

		/*linear scale isn't great as duty doesn't scale with brightness linearly but ok for a first go*/
		uint16_t brightnessScale = 64; /*power of 2 for efficiency*/
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	82fb      	strh	r3, [r7, #22]


		LIS3DSH_Results_t xyz_accels= LIS3DSH_read();
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f8fe 	bl	8000b9c <LIS3DSH_read>

		uint16_t xbrightnessPos = (uint16_t)((xyz_accels.x_g > 0) ? xyz_accels.x_g : 0);
 80009a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80009a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	82bb      	strh	r3, [r7, #20]
		uint16_t xbrightnessNeg = (uint16_t)((xyz_accels.x_g < 0) ? -xyz_accels.x_g : 0);
 80009ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da05      	bge.n	80009c0 <Blinky_taskHandler+0x40>
 80009b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	425b      	negs	r3, r3
 80009bc:	b29b      	uxth	r3, r3
 80009be:	e000      	b.n	80009c2 <Blinky_taskHandler+0x42>
 80009c0:	2300      	movs	r3, #0
 80009c2:	827b      	strh	r3, [r7, #18]

		uint16_t ybrightnessPos = (uint16_t)((xyz_accels.y_g > 0) ? xyz_accels.y_g : 0);
 80009c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	823b      	strh	r3, [r7, #16]
		uint16_t ybrightnessNeg = (uint16_t)((xyz_accels.y_g < 0) ? -xyz_accels.y_g : 0);
 80009d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	da05      	bge.n	80009e4 <Blinky_taskHandler+0x64>
 80009d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	425b      	negs	r3, r3
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	e000      	b.n	80009e6 <Blinky_taskHandler+0x66>
 80009e4:	2300      	movs	r3, #0
 80009e6:	81fb      	strh	r3, [r7, #14]

		set_blue_LED_duty( ybrightnessNeg / brightnessScale);
 80009e8:	89fa      	ldrh	r2, [r7, #14]
 80009ea:	8afb      	ldrh	r3, [r7, #22]
 80009ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f91a 	bl	8000c2c <set_blue_LED_duty>
		set_orange_LED_duty(ybrightnessPos / brightnessScale);
 80009f8:	8a3a      	ldrh	r2, [r7, #16]
 80009fa:	8afb      	ldrh	r3, [r7, #22]
 80009fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f932 	bl	8000c6c <set_orange_LED_duty>

		set_red_LED_duty(xbrightnessPos / brightnessScale);
 8000a08:	8aba      	ldrh	r2, [r7, #20]
 8000a0a:	8afb      	ldrh	r3, [r7, #22]
 8000a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f91a 	bl	8000c4c <set_red_LED_duty>
		set_green_LED_duty(xbrightnessNeg / brightnessScale);
 8000a18:	8a7a      	ldrh	r2, [r7, #18]
 8000a1a:	8afb      	ldrh	r3, [r7, #22]
 8000a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f932 	bl	8000c8c <set_green_LED_duty>

		break;
 8000a28:	e004      	b.n	8000a34 <Blinky_taskHandler+0xb4>
	}
	default: {
		DBC_ERROR(200);
 8000a2a:	21c8      	movs	r1, #200	; 0xc8
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <Blinky_taskHandler+0xbc>)
 8000a2e:	f000 f93d 	bl	8000cac <DBC_fault_handler>
		break;
 8000a32:	bf00      	nop
	}
	}
}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	080044fc 	.word	0x080044fc

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4907      	ldr	r1, [pc, #28]	; (8000a78 <__NVIC_EnableIRQ+0x38>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a80:	f3bf 8f4f 	dsb	sy
}
 8000a84:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <__NVIC_SystemReset+0x24>)
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a8e:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <__NVIC_SystemReset+0x24>)
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_SystemReset+0x28>)
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a96:	f3bf 8f4f 	dsb	sy
}
 8000a9a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <__NVIC_SystemReset+0x20>
 8000aa0:	e000ed00 	.word	0xe000ed00
 8000aa4:	05fa0004 	.word	0x05fa0004

08000aa8 <HASH_RNG_IRQHandler>:

static SPIManager_Task_t SpiMgrInstance;
static SST_Evt const *spiMsgQueue[SPIHANDLER_MSG_QUEUELEN];
static SST_Task *const AO_SpiMgr = &(SpiMgrInstance.super); /*Scheduler task pointer*/

void SPIMANAGER_IRQHandler(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	SST_Task_activate(AO_SpiMgr); /*trigger the task on interrupt.*/
 8000aac:	4b02      	ldr	r3, [pc, #8]	; (8000ab8 <HASH_RNG_IRQHandler+0x10>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 ff06 	bl	80018c0 <SST_Task_activate>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000080 	.word	0x20000080

08000abc <BSP_init_SPIManager_Task>:

void BSP_init_SPIManager_Task(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af02      	add	r7, sp, #8
	SPIManager_ctor(&SpiMgrInstance, &hspi1);
 8000ac2:	490b      	ldr	r1, [pc, #44]	; (8000af0 <BSP_init_SPIManager_Task+0x34>)
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <BSP_init_SPIManager_Task+0x38>)
 8000ac6:	f000 fb61 	bl	800118c <SPIManager_ctor>

	SST_Task_setIRQ(AO_SpiMgr, SPIMANAGER_IRQn);
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <BSP_init_SPIManager_Task+0x38>)
 8000acc:	2150      	movs	r1, #80	; 0x50
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 ff36 	bl	8001940 <SST_Task_setIRQ>

	NVIC_EnableIRQ(SPIMANAGER_IRQn);
 8000ad4:	2050      	movs	r0, #80	; 0x50
 8000ad6:	f7ff ffb3 	bl	8000a40 <__NVIC_EnableIRQ>

	SST_Task_start(AO_SpiMgr, SPIMANAGER_TASK_PRIORITY, spiMsgQueue,
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <BSP_init_SPIManager_Task+0x38>)
 8000adc:	2300      	movs	r3, #0
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	230a      	movs	r3, #10
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <BSP_init_SPIManager_Task+0x3c>)
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	f000 fd23 	bl	8001530 <SST_Task_start>
	SPIHANDLER_MSG_QUEUELEN, 0);
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000028 	.word	0x20000028
 8000af4:	20000080 	.word	0x20000080
 8000af8:	200000fc 	.word	0x200000fc

08000afc <HAL_SPI_TxRxCpltCallback>:
/*immutable txrx complete event signal*/
static const SST_Evt TxxRxCompleteEventSignal = { .sig = SPI_TXRXCOMPLETE_SIG };
static SST_Evt const *const pTxRxCompleteEventSignal = &TxxRxCompleteEventSignal;

/*SPI device needs to post calback events to the SPI managers*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d105      	bne.n	8000b18 <HAL_SPI_TxRxCpltCallback+0x1c>
		SST_Task_post(AO_SpiMgr, pTxRxCompleteEventSignal);
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_SPI_TxRxCpltCallback+0x28>)
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fd44 	bl	80015a0 <SST_Task_post>
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000028 	.word	0x20000028
 8000b24:	20000080 	.word	0x20000080
 8000b28:	08004504 	.word	0x08004504

08000b2c <SPI1_IRQHandler>:

/*implement the SPI IRQ handler*/
void SPI1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
HAL_SPI_IRQHandler(&hspi1);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <SPI1_IRQHandler+0x10>)
 8000b32:	f002 fa9f 	bl	8003074 <HAL_SPI_IRQHandler>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000028 	.word	0x20000028

08000b40 <DCMI_IRQHandler>:
static LIS3DSH_task_t LIS3DSHInstance;

static SST_Evt const *LIS3DSHMsgQueue[LIS3DSH_MSG_QUEUELEN];
static SST_Task *const AO_LIS3DSH = &(LIS3DSHInstance.super); /*Scheduler task pointer*/

void LIS3DSH_IRQHandler(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	SST_Task_activate(AO_LIS3DSH); /*trigger the task on interrupt.*/
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <DCMI_IRQHandler+0x10>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 feba 	bl	80018c0 <SST_Task_activate>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000124 	.word	0x20000124

08000b54 <BSP_init_LIS3DSH_Task>:

void BSP_init_LIS3DSH_Task(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af02      	add	r7, sp, #8

	LIS3DSH_ctor(&LIS3DSHInstance, AO_SpiMgr,
 8000b5a:	490c      	ldr	r1, [pc, #48]	; (8000b8c <BSP_init_LIS3DSH_Task+0x38>)
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <BSP_init_LIS3DSH_Task+0x3c>)
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <BSP_init_LIS3DSH_Task+0x40>)
 8000b62:	f7ff fcaf 	bl	80004c4 <LIS3DSH_ctor>
	CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin);

	SST_Task_setIRQ(AO_LIS3DSH, LIS3DSH_IRQn);
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <BSP_init_LIS3DSH_Task+0x40>)
 8000b68:	214e      	movs	r1, #78	; 0x4e
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fee8 	bl	8001940 <SST_Task_setIRQ>

	NVIC_EnableIRQ(LIS3DSH_IRQn);
 8000b70:	204e      	movs	r0, #78	; 0x4e
 8000b72:	f7ff ff65 	bl	8000a40 <__NVIC_EnableIRQ>

	SST_Task_start(AO_LIS3DSH, LIS3DSH_TASK_PRIORITY, LIS3DSHMsgQueue,
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <BSP_init_LIS3DSH_Task+0x40>)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <BSP_init_LIS3DSH_Task+0x44>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	f000 fcd5 	bl	8001530 <SST_Task_start>
	LIS3DSH_MSG_QUEUELEN, 0);
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000080 	.word	0x20000080
 8000b90:	40021000 	.word	0x40021000
 8000b94:	20000124 	.word	0x20000124
 8000b98:	200001a0 	.word	0x200001a0

08000b9c <LIS3DSH_read>:

/*unprotected read of accel data*/
LIS3DSH_Results_t LIS3DSH_read(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	return LIS3DSH_get_accel_xyz(&LIS3DSHInstance);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4904      	ldr	r1, [pc, #16]	; (8000bb8 <LIS3DSH_read+0x1c>)
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fce7 	bl	800057c <LIS3DSH_get_accel_xyz>
}
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000124 	.word	0x20000124

08000bbc <UNUSED_IRQHandler0>:
static SST_Task *const AO_Blink = &(BlinkyInstance.super); /*Scheduler task pointer*/

#define BLINKY_MSG_QUEUELEN (10u)
static SST_Evt const *blinkyMsgQueue[BLINKY_MSG_QUEUELEN]; /*initialised in the SST_Task_Start function*/

void BLINKY_IRQHANDLER0(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	SST_Task_activate(AO_Blink); /*trigger the task on interrupt.*/
 8000bc0:	4b02      	ldr	r3, [pc, #8]	; (8000bcc <UNUSED_IRQHandler0+0x10>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fe7c 	bl	80018c0 <SST_Task_activate>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200001a8 	.word	0x200001a8

08000bd0 <BSP_init_blinky_task>:

void BSP_init_blinky_task(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af02      	add	r7, sp, #8
	Blinky_ctor(&BlinkyInstance);
 8000bd6:	480b      	ldr	r0, [pc, #44]	; (8000c04 <BSP_init_blinky_task+0x34>)
 8000bd8:	f7ff fea8 	bl	800092c <Blinky_ctor>

	SST_Task_setIRQ(AO_Blink, BLINKY_IRQn);
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <BSP_init_blinky_task+0x34>)
 8000bde:	214f      	movs	r1, #79	; 0x4f
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fead 	bl	8001940 <SST_Task_setIRQ>

	NVIC_EnableIRQ(BLINKY_IRQn); /*RNG interrupt number is for the blinky task*/
 8000be6:	204f      	movs	r0, #79	; 0x4f
 8000be8:	f7ff ff2a 	bl	8000a40 <__NVIC_EnableIRQ>

	SST_Task_start(AO_Blink, BLINKY_TASK_PRIORITY, blinkyMsgQueue,
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <BSP_init_blinky_task+0x34>)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <BSP_init_blinky_task+0x38>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	f000 fc9a 	bl	8001530 <SST_Task_start>
	BLINKY_MSG_QUEUELEN, 0); /*no intial event*/
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200001a8 	.word	0x200001a8
 8000c08:	200001d0 	.word	0x200001d0

08000c0c <BSP_init>:

void BSP_init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8000c10:	f000 f97c 	bl	8000f0c <MX_GPIO_Init>
	MX_SPI1_Init();
 8000c14:	f000 f940 	bl	8000e98 <MX_SPI1_Init>
	MX_TIM4_Init();
 8000c18:	f000 feee 	bl	80019f8 <MX_TIM4_Init>
	BSP_init_SPIManager_Task();
 8000c1c:	f7ff ff4e 	bl	8000abc <BSP_init_SPIManager_Task>
	BSP_init_blinky_task();
 8000c20:	f7ff ffd6 	bl	8000bd0 <BSP_init_blinky_task>
	BSP_init_LIS3DSH_Task();
 8000c24:	f7ff ff96 	bl	8000b54 <BSP_init_LIS3DSH_Task>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <set_blue_LED_duty>:



void set_blue_LED_duty(uint16_t duty) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
	TIM4->CCR4 = duty;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <set_blue_LED_duty+0x1c>)
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40000800 	.word	0x40000800

08000c4c <set_red_LED_duty>:
void set_red_LED_duty(uint16_t duty) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
	TIM4->CCR3 = duty;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <set_red_LED_duty+0x1c>)
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40000800 	.word	0x40000800

08000c6c <set_orange_LED_duty>:

void set_orange_LED_duty(uint16_t duty) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
	TIM4->CCR2 = duty;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <set_orange_LED_duty+0x1c>)
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40000800 	.word	0x40000800

08000c8c <set_green_LED_duty>:

void set_green_LED_duty(uint16_t duty) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
	TIM4->CCR1 = duty;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <set_green_LED_duty+0x1c>)
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	40000800 	.word	0x40000800

08000cac <DBC_fault_handler>:

void DBC_fault_handler(char const *const module, int const label) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	 */
	(void) module;
	(void) label;

	/* set PRIMASK to disable interrupts and stop SST right here */
	__asm volatile ("cpsid i");
 8000cb6:	b672      	cpsid	i

	set_red_LED_duty(0u); /*turn off red led*/
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ffc7 	bl	8000c4c <set_red_LED_duty>

#ifndef NDEBUG
	/* blink LED*/
#endif
	NVIC_SystemReset();
 8000cbe:	f7ff fedd 	bl	8000a7c <__NVIC_SystemReset>
	...

08000cc4 <HAL_MspInit>:
}

/* CUBEMx auto generated functions */
void HAL_MspInit(void) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
	if (hspi->Instance == SPI1) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <HAL_SPI_MspInit+0xa4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d13b      	bne.n	8000dae <HAL_SPI_MspInit+0x9a>

		__HAL_RCC_SPI1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_SPI_MspInit+0xa8>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <HAL_SPI_MspInit+0xa8>)
 8000d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_SPI_MspInit+0xa8>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_SPI_MspInit+0xa8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0xa8>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_SPI_MspInit+0xa8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000d6e:	23e0      	movs	r3, #224	; 0xe0
 8000d70:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <HAL_SPI_MspInit+0xac>)
 8000d8a:	f001 f94f 	bl	800202c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
 8000d90:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_SPI_MspInit+0xac>)
 8000daa:	f001 f93f 	bl	800202c <HAL_GPIO_Init>


	}

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <SystemClock_Config>:

	}

}

void SystemClock_Config(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	; 0x50
 8000dc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000dca:	f107 0320 	add.w	r3, r7, #32
 8000dce:	2230      	movs	r2, #48	; 0x30
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fb56 	bl	8004484 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <SystemClock_Config+0xcc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <SystemClock_Config+0xcc>)
 8000df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <SystemClock_Config+0xcc>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <SystemClock_Config+0xd0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <SystemClock_Config+0xd0>)
 8000e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <SystemClock_Config+0xd0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e34:	2308      	movs	r3, #8
 8000e36:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e3c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e42:	2307      	movs	r3, #7
 8000e44:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 faa4 	bl	8002398 <HAL_RCC_OscConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x96>
		Error_Handler();
 8000e56:	f000 f987 	bl	8001168 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e6a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2105      	movs	r1, #5
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fd05 	bl	8002888 <HAL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0xc4>
		Error_Handler();
 8000e84:	f000 f970 	bl	8001168 <Error_Handler>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3750      	adds	r7, #80	; 0x50
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40007000 	.word	0x40007000

08000e98 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <MX_SPI1_Init+0x70>)
 8000ea0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000ea4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000ecc:	2220      	movs	r2, #32
 8000ece:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000ee4:	220a      	movs	r2, #10
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_SPI1_Init+0x6c>)
 8000eea:	f001 feb9 	bl	8002c60 <HAL_SPI_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000ef4:	f000 f938 	bl	8001168 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */
	NVIC_EnableIRQ(SPI1_IRQn);
 8000ef8:	2023      	movs	r0, #35	; 0x23
 8000efa:	f7ff fda1 	bl	8000a40 <__NVIC_EnableIRQ>
	/* USER CODE END SPI1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000028 	.word	0x20000028
 8000f08:	40013000 	.word	0x40013000

08000f0c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	4b8a      	ldr	r3, [pc, #552]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a89      	ldr	r2, [pc, #548]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f2c:	f043 0310 	orr.w	r3, r3, #16
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b87      	ldr	r3, [pc, #540]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	4b83      	ldr	r3, [pc, #524]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a82      	ldr	r2, [pc, #520]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b80      	ldr	r3, [pc, #512]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b7c      	ldr	r3, [pc, #496]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a7b      	ldr	r2, [pc, #492]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b79      	ldr	r3, [pc, #484]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b75      	ldr	r3, [pc, #468]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a74      	ldr	r2, [pc, #464]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b72      	ldr	r3, [pc, #456]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	4b6e      	ldr	r3, [pc, #440]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a6d      	ldr	r2, [pc, #436]	; (8001150 <MX_GPIO_Init+0x244>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b6b      	ldr	r3, [pc, #428]	; (8001150 <MX_GPIO_Init+0x244>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b67      	ldr	r3, [pc, #412]	; (8001150 <MX_GPIO_Init+0x244>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a66      	ldr	r2, [pc, #408]	; (8001150 <MX_GPIO_Init+0x244>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b64      	ldr	r3, [pc, #400]	; (8001150 <MX_GPIO_Init+0x244>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4861      	ldr	r0, [pc, #388]	; (8001154 <MX_GPIO_Init+0x248>)
 8000fd0:	f001 f9c8 	bl	8002364 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	485f      	ldr	r0, [pc, #380]	; (8001158 <MX_GPIO_Init+0x24c>)
 8000fda:	f001 f9c3 	bl	8002364 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000fe4:	485d      	ldr	r0, [pc, #372]	; (800115c <MX_GPIO_Init+0x250>)
 8000fe6:	f001 f9bd 	bl	8002364 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fea:	2308      	movs	r3, #8
 8000fec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4854      	ldr	r0, [pc, #336]	; (8001154 <MX_GPIO_Init+0x248>)
 8001002:	f001 f813 	bl	800202c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET); /*set chip select high initially*/
 8001006:	2201      	movs	r2, #1
 8001008:	2108      	movs	r1, #8
 800100a:	4852      	ldr	r0, [pc, #328]	; (8001154 <MX_GPIO_Init+0x248>)
 800100c:	f001 f9aa 	bl	8002364 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	484c      	ldr	r0, [pc, #304]	; (8001158 <MX_GPIO_Init+0x24c>)
 8001028:	f001 f800 	bl	800202c <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800102c:	2308      	movs	r3, #8
 800102e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103c:	2305      	movs	r3, #5
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
	/*  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);*/

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001044:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001048:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4842      	ldr	r0, [pc, #264]	; (8001160 <MX_GPIO_Init+0x254>)
 8001056:	f000 ffe9 	bl	800202c <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800105a:	2310      	movs	r3, #16
 800105c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800106a:	2306      	movs	r3, #6
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	483a      	ldr	r0, [pc, #232]	; (8001160 <MX_GPIO_Init+0x254>)
 8001076:	f000 ffd9 	bl	800202c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 800107a:	2304      	movs	r3, #4
 800107c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4835      	ldr	r0, [pc, #212]	; (8001164 <MX_GPIO_Init+0x258>)
 800108e:	f000 ffcd 	bl	800202c <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001096:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a4:	2305      	movs	r3, #5
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	482d      	ldr	r0, [pc, #180]	; (8001164 <MX_GPIO_Init+0x258>)
 80010b0:	f000 ffbc 	bl	800202c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80010b4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80010b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4823      	ldr	r0, [pc, #140]	; (800115c <MX_GPIO_Init+0x250>)
 80010ce:	f000 ffad 	bl	800202c <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 80010d2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e4:	2306      	movs	r3, #6
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	481a      	ldr	r0, [pc, #104]	; (8001158 <MX_GPIO_Init+0x24c>)
 80010f0:	f000 ff9c 	bl	800202c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010f4:	2320      	movs	r3, #32
 80010f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <MX_GPIO_Init+0x250>)
 8001108:	f000 ff90 	bl	800202c <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 800110c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001110:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001112:	2312      	movs	r3, #18
 8001114:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001116:	2301      	movs	r3, #1
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111e:	2304      	movs	r3, #4
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	480e      	ldr	r0, [pc, #56]	; (8001164 <MX_GPIO_Init+0x258>)
 800112a:	f000 ff7f 	bl	800202c <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800112e:	2302      	movs	r3, #2
 8001130:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001132:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001136:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_GPIO_Init+0x248>)
 8001144:	f000 ff72 	bl	800202c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40021000 	.word	0x40021000
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400

08001168 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001170:	e7fe      	b.n	8001170 <Error_Handler+0x8>

08001172 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f000 fd6f 	bl	8001c58 <HAL_Init>
  SystemClock_Config();
 800117a:	f7ff fe23 	bl	8000dc4 <SystemClock_Config>
  SST_init(); /*initialise super simple tasker kernel*/
 800117e:	f000 facf 	bl	8001720 <SST_init>
  BSP_init();
 8001182:	f7ff fd43 	bl	8000c0c <BSP_init>

  /*Start the application*/
  SST_Task_run();
 8001186:	f000 f9b7 	bl	80014f8 <SST_Task_run>

  while (1)
 800118a:	e7fe      	b.n	800118a <main+0x18>

0800118c <SPIManager_ctor>:
		SPIManager_Job_t *pJob);

 SPIManager_Job_t* SPIManager_dequeue_Job(SPIManager_Task_t *const me);

/*****Function Declarations*****/
void SPIManager_ctor(SPIManager_Task_t *const me, SPI_HandleTypeDef *spiDevice) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	/*construct internal objects*/
	SST_Task_ctor(&(me->super), (SST_Handler) &SPIManager_init_Handler,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <SPIManager_ctor+0x5c>)
 800119a:	4914      	ldr	r1, [pc, #80]	; (80011ec <SPIManager_ctor+0x60>)
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f9b4 	bl	800150a <SST_Task_ctor>
			(SST_Handler) &SPIManager_task_Handler);
	SST_TimeEvt_ctor(&(me->JobTimeoutTimer), SPI_TIMEOUT_SIG, &(me->super));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3320      	adds	r3, #32
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	2103      	movs	r1, #3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fa32 	bl	8001614 <SST_TimeEvt_ctor>

	/*initialise simple fields*/
	me->pCurrentJob = NULL;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
	me->JobsHead = 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	675a      	str	r2, [r3, #116]	; 0x74
	me->JobsTail = 0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	679a      	str	r2, [r3, #120]	; 0x78
	me->MgrState = SPI_MGR_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	761a      	strb	r2, [r3, #24]
	memset(me->pMgrJobs, 0u, SPIMANAGER_QUEUE_SIZE * sizeof(SPIManager_Job_t));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3334      	adds	r3, #52	; 0x34
 80011cc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 f956 	bl	8004484 <memset>
	me->pSPIPeriph = spiDevice;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	61da      	str	r2, [r3, #28]
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	08001245 	.word	0x08001245
 80011ec:	0800122d 	.word	0x0800122d

080011f0 <SPIManager_post_txrx_Request>:

/*public function to allow external tasks to post a tx rx event request*/
void SPIManager_post_txrx_Request(SST_Task *const AO, SPIManager_Evnt_t *pEvent) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]

	DBC_ASSERT(0, (AO != NULL) && (pEvent != NULL) && (pEvent->pJob != NULL));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <SPIManager_post_txrx_Request+0x1e>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <SPIManager_post_txrx_Request+0x1e>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <SPIManager_post_txrx_Request+0x26>
 800120e:	2100      	movs	r1, #0
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <SPIManager_post_txrx_Request+0x38>)
 8001212:	f7ff fd4b 	bl	8000cac <DBC_fault_handler>

	SST_Task_post(AO, SST_EVT_DOWNCAST(SST_Evt, pEvent));
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f9c1 	bl	80015a0 <SST_Task_post>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	08004508 	.word	0x08004508

0800122c <SPIManager_init_Handler>:

/*The init event handler does nothing currently as everything is initialised in the constructor*/
void SPIManager_init_Handler(SPIManager_Task_t *const me,
		SPIManager_Evnt_t const *const ie) {
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	(void) ie;
	(void) me;
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SPIManager_task_Handler>:

void SPIManager_task_Handler(SPIManager_Task_t *const me,
		SPIManager_Evnt_t const *const e) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]

	switch (e->super.sig) {
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d00f      	beq.n	8001276 <SPIManager_task_Handler+0x32>
 8001256:	2b03      	cmp	r3, #3
 8001258:	dc11      	bgt.n	800127e <SPIManager_task_Handler+0x3a>
 800125a:	2b01      	cmp	r3, #1
 800125c:	d002      	beq.n	8001264 <SPIManager_task_Handler+0x20>
 800125e:	2b02      	cmp	r3, #2
 8001260:	d005      	beq.n	800126e <SPIManager_task_Handler+0x2a>
 8001262:	e00c      	b.n	800127e <SPIManager_task_Handler+0x3a>
	case SPI_TXRXREQ_SIG: {
		SPIManager_txrx_Req_Handler(me, e);
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f894 	bl	8001394 <SPIManager_txrx_Req_Handler>
		break;
 800126c:	e00c      	b.n	8001288 <SPIManager_task_Handler+0x44>
	}
	case SPI_TXRXCOMPLETE_SIG: {
		SPIManager_txrx_complete_Handler(me);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f850 	bl	8001314 <SPIManager_txrx_complete_Handler>
		break;
 8001274:	e008      	b.n	8001288 <SPIManager_task_Handler+0x44>
	}
	case SPI_TIMEOUT_SIG: {
		SPIManager_Timeout_Handler(me);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f8c0 	bl	80013fc <SPIManager_Timeout_Handler>
		break;
 800127c:	e004      	b.n	8001288 <SPIManager_task_Handler+0x44>
	}
	default: {
		DBC_ERROR(200);
 800127e:	21c8      	movs	r1, #200	; 0xc8
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <SPIManager_task_Handler+0x4c>)
 8001282:	f7ff fd13 	bl	8000cac <DBC_fault_handler>
	}
	}
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	08004508 	.word	0x08004508

08001294 <SPIManager_start_txrx>:

 void SPIManager_start_txrx(SPIManager_Task_t *const me,
		SPIManager_Job_t *pJob) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]

	DBC_ASSERT(1,
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <SPIManager_start_txrx+0x18>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <SPIManager_start_txrx+0x20>
 80012ac:	2101      	movs	r1, #1
 80012ae:	4818      	ldr	r0, [pc, #96]	; (8001310 <SPIManager_start_txrx+0x7c>)
 80012b0:	f7ff fcfc 	bl	8000cac <DBC_fault_handler>
			(me != NULL) && (pJob->pAOrequester != NULL));

	HAL_GPIO_WritePin(pJob->pcsGPIOPort, pJob->csGPIOPin, GPIO_PIN_RESET); /*set the chip select pin low*/
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68d8      	ldr	r0, [r3, #12]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	8a1b      	ldrh	r3, [r3, #16]
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	f001 f850 	bl	8002364 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef result = HAL_SPI_TransmitReceive_IT(me->pSPIPeriph,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69d8      	ldr	r0, [r3, #28]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	8a9b      	ldrh	r3, [r3, #20]
 80012d4:	f001 fd4e 	bl	8002d74 <HAL_SPI_TransmitReceive_IT>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
			pJob->txData, pJob->rxData, pJob->lenData);
	me->pCurrentJob = pJob;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
	me->MgrState = SPI_MGR_BUSY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	761a      	strb	r2, [r3, #24]
	SST_TimeEvt_arm(&(me->JobTimeoutTimer), pJob->timeoutCnt_ms, 0u);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f103 0020 	add.w	r0, r3, #32
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	8a5b      	ldrh	r3, [r3, #18]
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	f000 f9af 	bl	8001658 <SST_TimeEvt_arm>

	DBC_ASSERT(2, result != HAL_ERROR);
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d103      	bne.n	8001308 <SPIManager_start_txrx+0x74>
 8001300:	2102      	movs	r1, #2
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <SPIManager_start_txrx+0x7c>)
 8001304:	f7ff fcd2 	bl	8000cac <DBC_fault_handler>
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	08004508 	.word	0x08004508

08001314 <SPIManager_txrx_complete_Handler>:

 void SPIManager_txrx_complete_Handler(SPIManager_Task_t *const me) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

	/*its expected that the spi manager is in the busy state if it gets a SPI_TXRXCOMPLETE_SIG*/
	DBC_ASSERT(10, (me != NULL) && (me->MgrState== SPI_MGR_BUSY));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <SPIManager_txrx_complete_Handler+0x16>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7e1b      	ldrb	r3, [r3, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <SPIManager_txrx_complete_Handler+0x1e>
 800132a:	210a      	movs	r1, #10
 800132c:	4817      	ldr	r0, [pc, #92]	; (800138c <SPIManager_txrx_complete_Handler+0x78>)
 800132e:	f7ff fcbd 	bl	8000cac <DBC_fault_handler>

	HAL_GPIO_WritePin(me->pCurrentJob->pcsGPIOPort, me->pCurrentJob->csGPIOPin,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	68d8      	ldr	r0, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	8a1b      	ldrh	r3, [r3, #16]
 800133e:	2201      	movs	r2, #1
 8001340:	4619      	mov	r1, r3
 8001342:	f001 f80f 	bl	8002364 <HAL_GPIO_WritePin>
			GPIO_PIN_SET); /*set the chip select pin high*/

	/*Post tx complete signal back to the requesting thread*/
	SST_Task_post((SST_Task* const ) me->pCurrentJob->pAOrequester,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a10      	ldr	r2, [pc, #64]	; (8001390 <SPIManager_txrx_complete_Handler+0x7c>)
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f925 	bl	80015a0 <SST_Task_post>
			pTxRxCompleteEventSignal);

	/*disarm the timout timer*/
	SST_TimeEvt_disarm(&me->JobTimeoutTimer); /*finished so disarm the timeout timer*/
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3320      	adds	r3, #32
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f992 	bl	8001684 <SST_TimeEvt_disarm>

	/*check for new job to do*/
	SPIManager_Job_t *newJob = SPIManager_dequeue_Job(me);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f8a3 	bl	80014ac <SPIManager_dequeue_Job>
 8001366:	60f8      	str	r0, [r7, #12]
	if (newJob == NULL) {
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d106      	bne.n	800137c <SPIManager_txrx_complete_Handler+0x68>
		me->MgrState = SPI_MGR_READY; /*goto ready state ready to receive more jobs*/
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	761a      	strb	r2, [r3, #24]
		me->pCurrentJob = NULL;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
	} else {
		SPIManager_start_txrx(me, newJob);
	}
}
 800137a:	e003      	b.n	8001384 <SPIManager_txrx_complete_Handler+0x70>
		SPIManager_start_txrx(me, newJob);
 800137c:	68f9      	ldr	r1, [r7, #12]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff88 	bl	8001294 <SPIManager_start_txrx>
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	08004508 	.word	0x08004508
 8001390:	08004510 	.word	0x08004510

08001394 <SPIManager_txrx_Req_Handler>:

 void SPIManager_txrx_Req_Handler(SPIManager_Task_t *const me,
		const SPIManager_Evnt_t *const e) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	DBC_ASSERT(20,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <SPIManager_txrx_Req_Handler+0x1e>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <SPIManager_txrx_Req_Handler+0x1e>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <SPIManager_txrx_Req_Handler+0x26>
 80013b2:	2114      	movs	r1, #20
 80013b4:	4810      	ldr	r0, [pc, #64]	; (80013f8 <SPIManager_txrx_Req_Handler+0x64>)
 80013b6:	f7ff fc79 	bl	8000cac <DBC_fault_handler>
			(me != NULL) && (e != NULL) && (e->pJob != NULL));

	if (me->MgrState == SPI_MGR_BUSY) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7e1b      	ldrb	r3, [r3, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <SPIManager_txrx_Req_Handler+0x4e>
		/*save job for when previous job has completed*/

		HAL_StatusTypeDef enqueueResult = SPIManager_enqueue_Job(me, e->pJob);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f847 	bl	800145c <SPIManager_enqueue_Job>
 80013ce:	4603      	mov	r3, r0
 80013d0:	73fb      	strb	r3, [r7, #15]
		DBC_ASSERT(21, enqueueResult != HAL_ERROR); /*assert there was space in the queue*/
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10a      	bne.n	80013ee <SPIManager_txrx_Req_Handler+0x5a>
 80013d8:	2115      	movs	r1, #21
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <SPIManager_txrx_Req_Handler+0x64>)
 80013dc:	f7ff fc66 	bl	8000cac <DBC_fault_handler>

	} else {
		SPIManager_start_txrx(me, e->pJob);
	}
}
 80013e0:	e005      	b.n	80013ee <SPIManager_txrx_Req_Handler+0x5a>
		SPIManager_start_txrx(me, e->pJob);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4619      	mov	r1, r3
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff53 	bl	8001294 <SPIManager_start_txrx>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	08004508 	.word	0x08004508

080013fc <SPIManager_Timeout_Handler>:

/* Handles timeout events from the SPIManagers internal timeout timer */
 void SPIManager_Timeout_Handler(SPIManager_Task_t *const me) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

	/*it's expected that the spi manager is in the busy state if it gets a SPI_TIMEOUT_SIG*/
	DBC_ASSERT(30,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00c      	beq.n	8001424 <SPIManager_Timeout_Handler+0x28>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	2b00      	cmp	r3, #0
 8001410:	d008      	beq.n	8001424 <SPIManager_Timeout_Handler+0x28>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <SPIManager_Timeout_Handler+0x28>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7e1b      	ldrb	r3, [r3, #24]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <SPIManager_Timeout_Handler+0x30>
 8001424:	211e      	movs	r1, #30
 8001426:	480b      	ldr	r0, [pc, #44]	; (8001454 <SPIManager_Timeout_Handler+0x58>)
 8001428:	f7ff fc40 	bl	8000cac <DBC_fault_handler>
			(me != NULL) && (me->pCurrentJob != NULL) && (me->pCurrentJob->pAOrequester != NULL) && (me->MgrState == SPI_MGR_BUSY));

	HAL_SPI_Abort(me->pSPIPeriph);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fd33 	bl	8002e9c <HAL_SPI_Abort>

	SST_Task_post((SST_Task* const ) me->pCurrentJob->pAOrequester,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <SPIManager_Timeout_Handler+0x5c>)
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f8ad 	bl	80015a0 <SST_Task_post>
			ptxTimeoutEventSignal); /*Post tx timeout signal back to the requesting thread*/

	me->MgrState = SPI_MGR_READY; /*free the manager for other tasks*/
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	08004508 	.word	0x08004508
 8001458:	08004514 	.word	0x08004514

0800145c <SPIManager_enqueue_Job>:

 HAL_StatusTypeDef SPIManager_enqueue_Job(SPIManager_Task_t *const me,
		SPIManager_Job_t *pJob) {
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	uint32_t tmpHead = me->JobsHead;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146a:	60bb      	str	r3, [r7, #8]

	/*increment and wrap the next index*/
	uint32_t tmpNext = tmpHead + 1u;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3301      	adds	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
	if (SPIMANAGER_QUEUE_SIZE == tmpNext) {
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b10      	cmp	r3, #16
 8001476:	d101      	bne.n	800147c <SPIManager_enqueue_Job+0x20>
		tmpNext = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
	}

	/*loose one cell in the buffer here but simplifies buffer full/empty detection*/
	if (tmpNext == me->JobsTail) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	429a      	cmp	r2, r3
 8001484:	d101      	bne.n	800148a <SPIManager_enqueue_Job+0x2e>
		return HAL_ERROR; /*buffer full*/
 8001486:	2301      	movs	r3, #1
 8001488:	e00a      	b.n	80014a0 <SPIManager_enqueue_Job+0x44>
	}

	me->pMgrJobs[tmpHead] = pJob;
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	330c      	adds	r3, #12
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	605a      	str	r2, [r3, #4]
	me->JobsHead = tmpNext;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	675a      	str	r2, [r3, #116]	; 0x74
	return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SPIManager_dequeue_Job>:

 SPIManager_Job_t* SPIManager_dequeue_Job(SPIManager_Task_t *const me) {
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	{
		uint32_t tmpTail = me->JobsTail;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80014b8:	60bb      	str	r3, [r7, #8]
		uint32_t tmpTailNext = (uint16_t) tmpTail + 1u;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
		/*check for empty queue*/
		if (me->JobsHead == tmpTail) {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d101      	bne.n	80014d0 <SPIManager_dequeue_Job+0x24>
			return NULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e00d      	b.n	80014ec <SPIManager_dequeue_Job+0x40>
		}

		/*wrap next tail*/
		if (SPIMANAGER_QUEUE_SIZE == tmpTailNext) {
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d101      	bne.n	80014da <SPIManager_dequeue_Job+0x2e>
			tmpTailNext = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
		}

		me->JobsTail = tmpTailNext;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	679a      	str	r2, [r3, #120]	; 0x78
		return me->pMgrJobs[tmpTail];
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	330c      	adds	r3, #12
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	685b      	ldr	r3, [r3, #4]
	}
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SST_Task_run>:
#include "dbc_assert.h" /* Design By Contract (DBC) assertions */

DBC_MODULE_NAME("sst")  /* for DBC assertions in this module */

/*..........................................................................*/
int SST_Task_run(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    SST_start();   /* port-specific start of multitasking */
 80014fc:	f000 f94c 	bl	8001798 <SST_start>
    SST_onStart(); /* application callback to config & start interrupts */
 8001500:	f000 fa34 	bl	800196c <SST_onStart>

    for (;;) { /* idle loop of the SST kernel */
        SST_onIdle();
 8001504:	f000 fa2b 	bl	800195e <SST_onIdle>
 8001508:	e7fc      	b.n	8001504 <SST_Task_run+0xc>

0800150a <SST_Task_ctor>:
/*--------------------------------------------------------------------------*/
void SST_Task_ctor(
    SST_Task * const me,
    SST_Handler init,
    SST_Handler dispatch)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
    me->init = init;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	601a      	str	r2, [r3, #0]
    me->dispatch = dispatch;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	605a      	str	r2, [r3, #4]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SST_Task_start>:
void SST_Task_start(
    SST_Task * const me,
    SST_TaskPrio prio,
    SST_Evt const **qBuf, SST_QCtr qLen,
    SST_Evt const * const ie)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	460b      	mov	r3, r1
 800153e:	72fb      	strb	r3, [r7, #11]
 8001540:	4613      	mov	r3, r2
 8001542:	72bb      	strb	r3, [r7, #10]
    /*! @pre
    * - the priority must be greater than zero
    * - the queue storage and length must be provided
    */
    DBC_REQUIRE(200,
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <SST_Task_start+0x26>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <SST_Task_start+0x26>
 8001550:	7abb      	ldrb	r3, [r7, #10]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d103      	bne.n	800155e <SST_Task_start+0x2e>
 8001556:	21c8      	movs	r1, #200	; 0xc8
 8001558:	4810      	ldr	r0, [pc, #64]	; (800159c <SST_Task_start+0x6c>)
 800155a:	f7ff fba7 	bl	8000cac <DBC_fault_handler>
        (0U < prio)
        && (qBuf != (SST_Evt const **)0) && (qLen > 0U));

    me->qBuf  = qBuf;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	609a      	str	r2, [r3, #8]
    me->end   = qLen - 1U;
 8001564:	7abb      	ldrb	r3, [r7, #10]
 8001566:	3b01      	subs	r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	731a      	strb	r2, [r3, #12]
    me->head  = 0U;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	735a      	strb	r2, [r3, #13]
    me->tail  = 0U;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	739a      	strb	r2, [r3, #14]
    me->nUsed = 0U;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	73da      	strb	r2, [r3, #15]

    SST_Task_setPrio(me, prio);
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	4619      	mov	r1, r3
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 f921 	bl	80017cc <SST_Task_setPrio>

    /* initialize this task with the initialization event */
    (*me->init)(me, ie); /* NOTE: virtual call */
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69b9      	ldr	r1, [r7, #24]
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	4798      	blx	r3
    /* TBD: implement event recycling */
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	08004518 	.word	0x08004518

080015a0 <SST_Task_post>:
/*..........................................................................*/
void SST_Task_post(SST_Task * const me, SST_Evt const * const e) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    /*! @pre the queue must be sized adequately and cannot overflow */
    DBC_REQUIRE(300, me->nUsed <= me->end);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7bda      	ldrb	r2, [r3, #15]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7b1b      	ldrb	r3, [r3, #12]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d904      	bls.n	80015c0 <SST_Task_post+0x20>
 80015b6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80015ba:	4815      	ldr	r0, [pc, #84]	; (8001610 <SST_Task_post+0x70>)
 80015bc:	f7ff fb76 	bl	8000cac <DBC_fault_handler>

    SST_PORT_CRIT_STAT
    SST_PORT_CRIT_ENTRY();
 80015c0:	b672      	cpsid	i
    me->qBuf[me->head] = e; /* insert event into the queue */
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7b5b      	ldrb	r3, [r3, #13]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	601a      	str	r2, [r3, #0]
    if (me->head == 0U) {   /* need to wrap the head? */
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7b5b      	ldrb	r3, [r3, #13]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d104      	bne.n	80015e4 <SST_Task_post+0x44>
        me->head = me->end; /* wrap around */
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7b1a      	ldrb	r2, [r3, #12]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	735a      	strb	r2, [r3, #13]
 80015e2:	e005      	b.n	80015f0 <SST_Task_post+0x50>
    }
    else {
        --me->head;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7b5b      	ldrb	r3, [r3, #13]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	735a      	strb	r2, [r3, #13]
    }
    ++me->nUsed;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7bdb      	ldrb	r3, [r3, #15]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	73da      	strb	r2, [r3, #15]
    SST_PORT_TASK_PEND();
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6952      	ldr	r2, [r2, #20]
 8001604:	601a      	str	r2, [r3, #0]
    SST_PORT_CRIT_EXIT();
 8001606:	b662      	cpsie	i
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	08004518 	.word	0x08004518

08001614 <SST_TimeEvt_ctor>:
/*..........................................................................*/
void SST_TimeEvt_ctor(
    SST_TimeEvt * const me,
    SST_Signal sig,
    SST_Task *task)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	460b      	mov	r3, r1
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	817b      	strh	r3, [r7, #10]
    me->super.sig = sig;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	897a      	ldrh	r2, [r7, #10]
 8001626:	801a      	strh	r2, [r3, #0]
    me->task = task;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	609a      	str	r2, [r3, #8]
    me->ctr = 0U;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	819a      	strh	r2, [r3, #12]
    me->interval = 0U;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	81da      	strh	r2, [r3, #14]

    /* insert time event "me" into the linked-list */
    me->next = timeEvt_head;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <SST_TimeEvt_ctor+0x40>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	605a      	str	r2, [r3, #4]
    timeEvt_head = me;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <SST_TimeEvt_ctor+0x40>)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	200001f8 	.word	0x200001f8

08001658 <SST_TimeEvt_arm>:
/*..........................................................................*/
void SST_TimeEvt_arm(
    SST_TimeEvt * const me,
    SST_TCtr ctr,
    SST_TCtr interval)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	803b      	strh	r3, [r7, #0]
    SST_PORT_CRIT_STAT
    SST_PORT_CRIT_ENTRY();
 8001668:	b672      	cpsid	i
    me->ctr = ctr;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	887a      	ldrh	r2, [r7, #2]
 800166e:	819a      	strh	r2, [r3, #12]
    me->interval = interval;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	883a      	ldrh	r2, [r7, #0]
 8001674:	81da      	strh	r2, [r3, #14]
    SST_PORT_CRIT_EXIT();
 8001676:	b662      	cpsie	i
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SST_TimeEvt_disarm>:
/*..........................................................................*/
bool SST_TimeEvt_disarm(SST_TimeEvt * const me) {
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    SST_PORT_CRIT_STAT
    SST_PORT_CRIT_ENTRY();
 800168c:	b672      	cpsid	i
    bool status = (me->ctr != 0U);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	899b      	ldrh	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	bf14      	ite	ne
 8001696:	2301      	movne	r3, #1
 8001698:	2300      	moveq	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
    me->ctr = 0U;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	819a      	strh	r2, [r3, #12]
    me->interval = 0U;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	81da      	strh	r2, [r3, #14]
    SST_PORT_CRIT_EXIT();
 80016a8:	b662      	cpsie	i
    return status;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <SST_TimeEvt_tick>:
/*..........................................................................*/
void SST_TimeEvt_tick(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
    for (SST_TimeEvt *t = timeEvt_head;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <SST_TimeEvt_tick+0x64>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	e021      	b.n	800170a <SST_TimeEvt_tick+0x52>
         t != (SST_TimeEvt *)0;
         t = t->next)
    {
        SST_PORT_CRIT_STAT
        SST_PORT_CRIT_ENTRY();
 80016c6:	b672      	cpsid	i
        if (t->ctr == 0U) { /* disarmed? (most frequent case) */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	899b      	ldrh	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <SST_TimeEvt_tick+0x1c>
            SST_PORT_CRIT_EXIT();
 80016d0:	b662      	cpsie	i
 80016d2:	e017      	b.n	8001704 <SST_TimeEvt_tick+0x4c>
        }
        else if (t->ctr == 1U) { /* expiring? */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	899b      	ldrh	r3, [r3, #12]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10c      	bne.n	80016f6 <SST_TimeEvt_tick+0x3e>
            t->ctr = t->interval;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	89da      	ldrh	r2, [r3, #14]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	819a      	strh	r2, [r3, #12]
            SST_PORT_CRIT_EXIT();
 80016e4:	b662      	cpsie	i

            SST_Task_post(t->task, &t->super);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff56 	bl	80015a0 <SST_Task_post>
 80016f4:	e006      	b.n	8001704 <SST_TimeEvt_tick+0x4c>
        }
        else { /* timing out */
            --t->ctr;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	899b      	ldrh	r3, [r3, #12]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	819a      	strh	r2, [r3, #12]
            SST_PORT_CRIT_EXIT();
 8001702:	b662      	cpsie	i
         t = t->next)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	607b      	str	r3, [r7, #4]
         t != (SST_TimeEvt *)0;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1da      	bne.n	80016c6 <SST_TimeEvt_tick+0xe>
        }
    }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200001f8 	.word	0x200001f8

08001720 <SST_init>:
/*..........................................................................*/
/* # of unused interrupt priority bits in NVIC */
static uint32_t nvic_prio_shift;

/* SST kernel facilities ---------------------------------------------------*/
void SST_init(void) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
    /* determine number of NVIC priority bits by writing 0xFF to the
    * NIVIC IP register for PendSV and then reading back the result,
    * which has only the implemented bits set.
    */
    uint32_t tmp = SCB_SYSPRI[3];
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <SST_init+0x6c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	607b      	str	r3, [r7, #4]
    SCB_SYSPRI[3] |= (0xFFU << 16U); /* write 0xFF to PendSV prio */
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <SST_init+0x6c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a16      	ldr	r2, [pc, #88]	; (800178c <SST_init+0x6c>)
 8001732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001736:	6013      	str	r3, [r2, #0]
    uint32_t prio = ((SCB_SYSPRI[3] >> 16U) & 0xFFU); /* read back */
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <SST_init+0x6c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	b2db      	uxtb	r3, r3
 8001740:	603b      	str	r3, [r7, #0]
    SCB_SYSPRI[3] = tmp; /* restore the original PendSV prio */
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <SST_init+0x6c>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6013      	str	r3, [r2, #0]

    for (tmp = 0U; tmp < 8U; ++tmp) {
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	e009      	b.n	8001762 <SST_init+0x42>
        if ((prio & (1U << tmp)) != 0U) {
 800174e:	2201      	movs	r2, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	409a      	lsls	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d106      	bne.n	800176a <SST_init+0x4a>
    for (tmp = 0U; tmp < 8U; ++tmp) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b07      	cmp	r3, #7
 8001766:	d9f2      	bls.n	800174e <SST_init+0x2e>
 8001768:	e000      	b.n	800176c <SST_init+0x4c>
            break;
 800176a:	bf00      	nop
        }
    }
    nvic_prio_shift = tmp;
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <SST_init+0x70>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]

#if (__ARM_FP != 0)
    /* configure the FPU for SST */
    FPU_FPCCR |= (1U << 30U)    /* automatic FPU state preservation (ASPEN) */
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <SST_init+0x74>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a07      	ldr	r2, [pc, #28]	; (8001794 <SST_init+0x74>)
 8001778:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800177c:	6013      	str	r3, [r2, #0]
                 | (1U << 31U); /* lazy stacking (LSPEN) */
#endif
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed20 	.word	0xe000ed20
 8001790:	200001fc 	.word	0x200001fc
 8001794:	e000ef34 	.word	0xe000ef34

08001798 <SST_start>:
/*..........................................................................*/
void SST_start(void) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
    * Typically the SST port to ARM Cortex-M should waste no NVIC priority
    * bits for grouping. This code ensures this setting, but priority
    * grouping can be still overridden in the application-specific
    * callback SST_onStart().
    */
    uint32_t tmp = SCB_AIRCR;
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <SST_start+0x30>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	607b      	str	r3, [r7, #4]
    /* clear the key bits 31:16 and priority grouping bits 10:8 */
    tmp &= ~((0xFFFFU << 16U) | (0x7U << 8U));
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017aa:	4013      	ands	r3, r2
 80017ac:	607b      	str	r3, [r7, #4]
    SCB_AIRCR = (0x05FAU << 16U) | tmp;
 80017ae:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <SST_start+0x30>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed0c 	.word	0xe000ed0c

080017cc <SST_Task_setPrio>:

/* SST Task facilities -----------------------------------------------------*/
void SST_Task_setPrio(SST_Task * const me, SST_TaskPrio prio) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]

    /*! @pre
    * - the IRQ number must be already set
    * - the priority must fit in the NVIC
    */
    DBC_REQUIRE(200,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <SST_Task_setPrio+0x24>
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <SST_Task_setPrio+0xec>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	21ff      	movs	r1, #255	; 0xff
 80017e8:	fa21 f303 	lsr.w	r3, r1, r3
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d903      	bls.n	80017f8 <SST_Task_setPrio+0x2c>
 80017f0:	21c8      	movs	r1, #200	; 0xc8
 80017f2:	4832      	ldr	r0, [pc, #200]	; (80018bc <SST_Task_setPrio+0xf0>)
 80017f4:	f7ff fa5a 	bl	8000cac <DBC_fault_handler>
                (me->nvic_irq != 0U)
                && (prio <= (0xFFU >> nvic_prio_shift)));

    /* convert the SST direct priority (1,2,..) to NVIC priority... */
    uint32_t nvic_prio = ((0xFFU >> nvic_prio_shift) + 1U - prio)
 80017f8:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <SST_Task_setPrio+0xec>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	22ff      	movs	r2, #255	; 0xff
 80017fe:	40da      	lsrs	r2, r3
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	1c5a      	adds	r2, r3, #1
                         << nvic_prio_shift;
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <SST_Task_setPrio+0xec>)
 8001808:	681b      	ldr	r3, [r3, #0]
    uint32_t nvic_prio = ((0xFFU >> nvic_prio_shift) + 1U - prio)
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	60fb      	str	r3, [r7, #12]

    SST_PORT_CRIT_STAT
    SST_PORT_CRIT_ENTRY();
 8001810:	b672      	cpsid	i
    /* set the Task priority of the associated IRQ */
    uint32_t tmp = NVIC_IP[me->nvic_irq >> 2U];
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800181e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60bb      	str	r3, [r7, #8]
    tmp &= ~(0xFFU << ((me->nvic_irq & 3U) << 3U));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	f003 0318 	and.w	r3, r3, #24
 8001830:	22ff      	movs	r2, #255	; 0xff
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	4013      	ands	r3, r2
 800183c:	60bb      	str	r3, [r7, #8]
    tmp |= (nvic_prio << ((me->nvic_irq & 3U) << 3U));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	f003 0318 	and.w	r3, r3, #24
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4313      	orrs	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
    NVIC_IP[me->nvic_irq >> 2U] = tmp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001860:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	601a      	str	r2, [r3, #0]

    /* enable the IRQ associated with the Task */
    NVIC_EN[me->nvic_irq >> 5U] = (1U << (me->nvic_irq & 0x1FU));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800187c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001880:	2101      	movs	r1, #1
 8001882:	fa01 f202 	lsl.w	r2, r1, r2
 8001886:	601a      	str	r2, [r3, #0]
    SST_PORT_CRIT_EXIT();
 8001888:	b662      	cpsie	i

    /* store the address of NVIC_PEND address and the IRQ bit */
    me->nvic_pend = &NVIC_PEND[me->nvic_irq >> 5U];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001896:	f503 4362 	add.w	r3, r3, #57856	; 0xe200
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6113      	str	r3, [r2, #16]
    me->nvic_irq  = (1U << (me->nvic_irq & 0x1FU));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	2201      	movs	r2, #1
 80018a8:	409a      	lsls	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	615a      	str	r2, [r3, #20]
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200001fc 	.word	0x200001fc
 80018bc:	0800451c 	.word	0x0800451c

080018c0 <SST_Task_activate>:
/*..........................................................................*/
void SST_Task_activate(SST_Task * const me) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    /*! @pre the queue must have some events */
    DBC_REQUIRE(300, me->nUsed > 0U);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7bdb      	ldrb	r3, [r3, #15]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d104      	bne.n	80018da <SST_Task_activate+0x1a>
 80018d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018d4:	4819      	ldr	r0, [pc, #100]	; (800193c <SST_Task_activate+0x7c>)
 80018d6:	f7ff f9e9 	bl	8000cac <DBC_fault_handler>

    /* get the event out of the queue */
    /* NOTE: no critical section because me->tail is accessed only
    * from this task
    */
    SST_Evt const *e = me->qBuf[me->tail];
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7b9b      	ldrb	r3, [r3, #14]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
    if (me->tail == 0U) { /* need to wrap the tail? */
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7b9b      	ldrb	r3, [r3, #14]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <SST_Task_activate+0x3c>
        me->tail = me->end; /* wrap around */
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b1a      	ldrb	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	739a      	strb	r2, [r3, #14]
 80018fa:	e005      	b.n	8001908 <SST_Task_activate+0x48>
    }
    else {
        --me->tail;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7b9b      	ldrb	r3, [r3, #14]
 8001900:	3b01      	subs	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	739a      	strb	r2, [r3, #14]
    }
    SST_PORT_CRIT_STAT
    SST_PORT_CRIT_ENTRY();
 8001908:	b672      	cpsid	i
    if ((--me->nUsed) > 0U) { /* some events still present in the queue? */
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7bdb      	ldrb	r3, [r3, #15]
 800190e:	3b01      	subs	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	73da      	strb	r2, [r3, #15]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7bdb      	ldrb	r3, [r3, #15]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <SST_Task_activate+0x68>
        *me->nvic_pend = me->nvic_irq; /* <=== pend the associated IRQ */
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6952      	ldr	r2, [r2, #20]
 8001926:	601a      	str	r2, [r3, #0]
    }
    SST_PORT_CRIT_EXIT();
 8001928:	b662      	cpsie	i

    /* dispatch the received event to this task */
    (*me->dispatch)(me, e); /* NOTE: virtual call */
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	68f9      	ldr	r1, [r7, #12]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
    /* TBD: implement event recycling */
}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	0800451c 	.word	0x0800451c

08001940 <SST_Task_setIRQ>:
/*..........................................................................*/
void SST_Task_setIRQ(SST_Task * const me, uint8_t irq) {
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
    me->nvic_irq = irq;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	615a      	str	r2, [r3, #20]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <SST_onIdle>:
    __asm volatile ("msr BASEPRI,%0" :: "r" (lock_key) : );
#endif
}

void SST_onIdle(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
	/*__WFI();*/
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SST_onStart>:

void SST_onStart(void){
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800197e:	e7fe      	b.n	800197e <NMI_Handler+0x4>

08001980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <HardFault_Handler+0x4>

08001986 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <MemManage_Handler+0x4>

0800198c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <BusFault_Handler+0x4>

08001992 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <UsageFault_Handler+0x4>

08001998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c6:	f000 f999 	bl	8001cfc <HAL_IncTick>

  SST_TimeEvt_tick(); /* process all SST time events */
 80019ca:	f7ff fe75 	bl	80016b8 <SST_TimeEvt_tick>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08e      	sub	sp, #56	; 0x38
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a28:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a2a:	4a3e      	ldr	r2, [pc, #248]	; (8001b24 <MX_TIM4_Init+0x12c>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a30:	220a      	movs	r2, #10
 8001a32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a4e:	4834      	ldr	r0, [pc, #208]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a50:	f001 fe92 	bl	8003778 <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a5a:	f7ff fb85 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	482d      	ldr	r0, [pc, #180]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a6c:	f002 f8b6 	bl	8003bdc <HAL_TIM_ConfigClockSource>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a76:	f7ff fb77 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a7a:	4829      	ldr	r0, [pc, #164]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a7c:	f001 fecb 	bl	8003816 <HAL_TIM_PWM_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a86:	f7ff fb6f 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	4619      	mov	r1, r3
 8001a98:	4821      	ldr	r0, [pc, #132]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001a9a:	f002 fc77 	bl	800438c <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001aa4:	f7ff fb60 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa8:	2360      	movs	r3, #96	; 0x60
 8001aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	220c      	movs	r2, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4818      	ldr	r0, [pc, #96]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001ac0:	f001 ffca 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001aca:	f7ff fb4d 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4812      	ldr	r0, [pc, #72]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001ad6:	f001 ffbf 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001ae0:	f7ff fb42 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001aec:	f001 ffb4 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001af6:	f7ff fb37 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4807      	ldr	r0, [pc, #28]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001b02:	f001 ffa9 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001b0c:	f7ff fb2c 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <MX_TIM4_Init+0x128>)
 8001b12:	f000 f82b 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 8001b16:	bf00      	nop
 8001b18:	3738      	adds	r7, #56	; 0x38
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000200 	.word	0x20000200
 8001b24:	40000800 	.word	0x40000800

08001b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_TIM_Base_MspInit+0x3c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d10d      	bne.n	8001b56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_TIM_Base_MspInit+0x40>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_TIM_Base_MspInit+0x40>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_TIM_Base_MspInit+0x40>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40000800 	.word	0x40000800
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_TIM_MspPostInit+0x88>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12e      	bne.n	8001bec <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_TIM_MspPostInit+0x8c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <HAL_TIM_MspPostInit+0x8c>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_TIM_MspPostInit+0x8c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = Red_Led_Pin | Blue_Led_Pin | Orange_Led_Pin | Green_Led_Pin;
 8001baa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001bae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Red_Led_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <HAL_TIM_MspPostInit+0x90>)
 8001bc8:	f000 fa30 	bl	800202c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /*Start the PWM output*/

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001bcc:	210c      	movs	r1, #12
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <HAL_TIM_MspPostInit+0x94>)
 8001bd0:	f001 fe7a 	bl	80038c8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001bd4:	2108      	movs	r1, #8
 8001bd6:	480a      	ldr	r0, [pc, #40]	; (8001c00 <HAL_TIM_MspPostInit+0x94>)
 8001bd8:	f001 fe76 	bl	80038c8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4808      	ldr	r0, [pc, #32]	; (8001c00 <HAL_TIM_MspPostInit+0x94>)
 8001be0:	f001 fe72 	bl	80038c8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001be4:	2100      	movs	r1, #0
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <HAL_TIM_MspPostInit+0x94>)
 8001be8:	f001 fe6e 	bl	80038c8 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40000800 	.word	0x40000800
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	20000200 	.word	0x20000200

08001c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c0a:	490e      	ldr	r1, [pc, #56]	; (8001c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c20:	4c0b      	ldr	r4, [pc, #44]	; (8001c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c2e:	f7ff fed1 	bl	80019d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c32:	f002 fc2f 	bl	8004494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c36:	f7ff fa9c 	bl	8001172 <main>
  bx  lr    
 8001c3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c48:	08004548 	.word	0x08004548
  ldr r2, =_sbss
 8001c4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c50:	2000024c 	.word	0x2000024c

08001c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <ADC_IRQHandler>
	...

08001c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_Init+0x40>)
 8001c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_Init+0x40>)
 8001c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_Init+0x40>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f000 f90d 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f808 	bl	8001c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8c:	f7ff f81a 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00

08001c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x54>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x58>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f917 	bl	8001eee <HAL_SYSTICK_Config>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00e      	b.n	8001ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d80a      	bhi.n	8001ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f000 f8ed 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cdc:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <HAL_InitTick+0x5c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000248 	.word	0x20000248

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000248 	.word	0x20000248

08001d3c <__NVIC_SetPriorityGrouping>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_SetPriority>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff47 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff5c 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffb0 	bl	8001e5c <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff ff06 	bl	8001d24 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d008      	beq.n	8001f38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e052      	b.n	8001fde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0216 	bic.w	r2, r2, #22
 8001f46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <HAL_DMA_Abort+0x62>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0208 	bic.w	r2, r2, #8
 8001f76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f88:	e013      	b.n	8001fb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f8a:	f7ff fecb 	bl	8001d24 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d90c      	bls.n	8001fb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e015      	b.n	8001fde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e4      	bne.n	8001f8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d004      	beq.n	8002004 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e00c      	b.n	800201e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2205      	movs	r2, #5
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e16b      	b.n	8002320 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 815a 	bne.w	800231a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d005      	beq.n	800207e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	2b02      	cmp	r3, #2
 800207c:	d130      	bne.n	80020e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d017      	beq.n	800211c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d123      	bne.n	8002170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80b4 	beq.w	800231a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b60      	ldr	r3, [pc, #384]	; (8002338 <HAL_GPIO_Init+0x30c>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a5f      	ldr	r2, [pc, #380]	; (8002338 <HAL_GPIO_Init+0x30c>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_GPIO_Init+0x30c>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ce:	4a5b      	ldr	r2, [pc, #364]	; (800233c <HAL_GPIO_Init+0x310>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_GPIO_Init+0x314>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02b      	beq.n	8002252 <HAL_GPIO_Init+0x226>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a51      	ldr	r2, [pc, #324]	; (8002344 <HAL_GPIO_Init+0x318>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d025      	beq.n	800224e <HAL_GPIO_Init+0x222>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a50      	ldr	r2, [pc, #320]	; (8002348 <HAL_GPIO_Init+0x31c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01f      	beq.n	800224a <HAL_GPIO_Init+0x21e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4f      	ldr	r2, [pc, #316]	; (800234c <HAL_GPIO_Init+0x320>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_GPIO_Init+0x21a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4e      	ldr	r2, [pc, #312]	; (8002350 <HAL_GPIO_Init+0x324>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x216>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4d      	ldr	r2, [pc, #308]	; (8002354 <HAL_GPIO_Init+0x328>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x212>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4c      	ldr	r2, [pc, #304]	; (8002358 <HAL_GPIO_Init+0x32c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x20e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4b      	ldr	r2, [pc, #300]	; (800235c <HAL_GPIO_Init+0x330>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x20a>
 8002232:	2307      	movs	r3, #7
 8002234:	e00e      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002236:	2308      	movs	r3, #8
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800223a:	2306      	movs	r3, #6
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x228>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x228>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	; (800233c <HAL_GPIO_Init+0x310>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a32      	ldr	r2, [pc, #200]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_GPIO_Init+0x334>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a27      	ldr	r2, [pc, #156]	; (8002360 <HAL_GPIO_Init+0x334>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_GPIO_Init+0x334>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_GPIO_Init+0x334>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_GPIO_Init+0x334>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae90 	bls.w	8002048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40021c00 	.word	0x40021c00
 8002360:	40013c00 	.word	0x40013c00

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002380:	e003      	b.n	800238a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e267      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d075      	beq.n	80024a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023b6:	4b88      	ldr	r3, [pc, #544]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d00c      	beq.n	80023dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d112      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ce:	4b82      	ldr	r3, [pc, #520]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023da:	d10b      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	4b7e      	ldr	r3, [pc, #504]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05b      	beq.n	80024a0 <HAL_RCC_OscConfig+0x108>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d157      	bne.n	80024a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e242      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	d106      	bne.n	800240c <HAL_RCC_OscConfig+0x74>
 80023fe:	4b76      	ldr	r3, [pc, #472]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a75      	ldr	r2, [pc, #468]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xb0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x98>
 8002416:	4b70      	ldr	r3, [pc, #448]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6f      	ldr	r2, [pc, #444]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b6d      	ldr	r3, [pc, #436]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6c      	ldr	r2, [pc, #432]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xb0>
 8002430:	4b69      	ldr	r3, [pc, #420]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a68      	ldr	r2, [pc, #416]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a65      	ldr	r2, [pc, #404]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fc68 	bl	8001d24 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff fc64 	bl	8001d24 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e207      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xc0>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fc54 	bl	8001d24 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fc50 	bl	8001d24 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1f3      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0xe8>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d11c      	bne.n	8002500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c6:	4b44      	ldr	r3, [pc, #272]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d116      	bne.n	8002500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x152>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e1c7      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4937      	ldr	r1, [pc, #220]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	e03a      	b.n	8002576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d020      	beq.n	800254a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002508:	4b34      	ldr	r3, [pc, #208]	; (80025dc <HAL_RCC_OscConfig+0x244>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7ff fc09 	bl	8001d24 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002516:	f7ff fc05 	bl	8001d24 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1a8      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4925      	ldr	r1, [pc, #148]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
 8002548:	e015      	b.n	8002576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCC_OscConfig+0x244>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7ff fbe8 	bl	8001d24 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002558:	f7ff fbe4 	bl	8001d24 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e187      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d036      	beq.n	80025f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d016      	beq.n	80025b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_RCC_OscConfig+0x248>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7ff fbc8 	bl	8001d24 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002598:	f7ff fbc4 	bl	8001d24 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e167      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_OscConfig+0x240>)
 80025ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x200>
 80025b6:	e01b      	b.n	80025f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_OscConfig+0x248>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7ff fbb1 	bl	8001d24 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	e00e      	b.n	80025e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c6:	f7ff fbad 	bl	8001d24 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d907      	bls.n	80025e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e150      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
 80025d8:	40023800 	.word	0x40023800
 80025dc:	42470000 	.word	0x42470000
 80025e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	4b88      	ldr	r3, [pc, #544]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 80025e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ea      	bne.n	80025c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8097 	beq.w	800272c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4b81      	ldr	r3, [pc, #516]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	4b7d      	ldr	r3, [pc, #500]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a7c      	ldr	r2, [pc, #496]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b7a      	ldr	r3, [pc, #488]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b77      	ldr	r3, [pc, #476]	; (800280c <HAL_RCC_OscConfig+0x474>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d118      	bne.n	800266c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263a:	4b74      	ldr	r3, [pc, #464]	; (800280c <HAL_RCC_OscConfig+0x474>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a73      	ldr	r2, [pc, #460]	; (800280c <HAL_RCC_OscConfig+0x474>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002646:	f7ff fb6d 	bl	8001d24 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7ff fb69 	bl	8001d24 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e10c      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_OscConfig+0x474>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x2ea>
 8002674:	4b64      	ldr	r3, [pc, #400]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	4a63      	ldr	r2, [pc, #396]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	; 0x70
 8002680:	e01c      	b.n	80026bc <HAL_RCC_OscConfig+0x324>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b05      	cmp	r3, #5
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x30c>
 800268a:	4b5f      	ldr	r3, [pc, #380]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a5e      	ldr	r2, [pc, #376]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
 8002696:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a5b      	ldr	r2, [pc, #364]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0x324>
 80026a4:	4b58      	ldr	r3, [pc, #352]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a57      	ldr	r2, [pc, #348]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	4b55      	ldr	r3, [pc, #340]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a54      	ldr	r2, [pc, #336]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 80026b6:	f023 0304 	bic.w	r3, r3, #4
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d015      	beq.n	80026f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7ff fb2e 	bl	8001d24 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7ff fb2a 	bl	8001d24 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e0cb      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	4b49      	ldr	r3, [pc, #292]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ee      	beq.n	80026cc <HAL_RCC_OscConfig+0x334>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f0:	f7ff fb18 	bl	8001d24 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f6:	e00a      	b.n	800270e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7ff fb14 	bl	8001d24 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0b5      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270e:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ee      	bne.n	80026f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271a:	7dfb      	ldrb	r3, [r7, #23]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002720:	4b39      	ldr	r3, [pc, #228]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	4a38      	ldr	r2, [pc, #224]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a1 	beq.w	8002878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002736:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b08      	cmp	r3, #8
 8002740:	d05c      	beq.n	80027fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d141      	bne.n	80027ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b31      	ldr	r3, [pc, #196]	; (8002810 <HAL_RCC_OscConfig+0x478>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff fae8 	bl	8001d24 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f7ff fae4 	bl	8001d24 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e087      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	3b01      	subs	r3, #1
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	491b      	ldr	r1, [pc, #108]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x478>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff fabd 	bl	8001d24 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ae:	f7ff fab9 	bl	8001d24 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e05c      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x416>
 80027cc:	e054      	b.n	8002878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCC_OscConfig+0x478>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7ff faa6 	bl	8001d24 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff faa2 	bl	8001d24 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e045      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCC_OscConfig+0x470>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x444>
 80027fa:	e03d      	b.n	8002878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e038      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
 8002808:	40023800 	.word	0x40023800
 800280c:	40007000 	.word	0x40007000
 8002810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_RCC_OscConfig+0x4ec>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d028      	beq.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d121      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d11a      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002844:	4013      	ands	r3, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800284a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800284c:	4293      	cmp	r3, r2
 800284e:	d111      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	3b01      	subs	r3, #1
 800285e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0cc      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d90c      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b8      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028dc:	4b59      	ldr	r3, [pc, #356]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a58      	ldr	r2, [pc, #352]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f4:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a52      	ldr	r2, [pc, #328]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	494d      	ldr	r1, [pc, #308]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d044      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d119      	bne.n	8002966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e07f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d003      	beq.n	8002946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002942:	2b03      	cmp	r3, #3
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e06f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e067      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002966:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 0203 	bic.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4934      	ldr	r1, [pc, #208]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002978:	f7ff f9d4 	bl	8001d24 <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	e00a      	b.n	8002996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002980:	f7ff f9d0 	bl	8001d24 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	; 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e04f      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 020c 	and.w	r2, r3, #12
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1eb      	bne.n	8002980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d20c      	bcs.n	80029d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e032      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4916      	ldr	r1, [pc, #88]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	490e      	ldr	r1, [pc, #56]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a0e:	f000 f821 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	490a      	ldr	r1, [pc, #40]	; (8002a48 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	5ccb      	ldrb	r3, [r1, r3]
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f934 	bl	8001c9c <HAL_InitTick>

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023c00 	.word	0x40023c00
 8002a44:	40023800 	.word	0x40023800
 8002a48:	08004528 	.word	0x08004528
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	20000004 	.word	0x20000004

08002a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b094      	sub	sp, #80	; 0x50
 8002a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a60:	2300      	movs	r3, #0
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a64:	2300      	movs	r3, #0
 8002a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a6c:	4b79      	ldr	r3, [pc, #484]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d00d      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x40>
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	f200 80e1 	bhi.w	8002c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x34>
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a86:	e0db      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b73      	ldr	r3, [pc, #460]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a8c:	e0db      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a8e:	4b73      	ldr	r3, [pc, #460]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a92:	e0d8      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a94:	4b6f      	ldr	r3, [pc, #444]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d063      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aaa:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abc:	633b      	str	r3, [r7, #48]	; 0x30
 8002abe:	2300      	movs	r3, #0
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	462b      	mov	r3, r5
 8002aca:	f04f 0000 	mov.w	r0, #0
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	0159      	lsls	r1, r3, #5
 8002ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad8:	0150      	lsls	r0, r2, #5
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4621      	mov	r1, r4
 8002ae0:	1a51      	subs	r1, r2, r1
 8002ae2:	6139      	str	r1, [r7, #16]
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002af8:	4659      	mov	r1, fp
 8002afa:	018b      	lsls	r3, r1, #6
 8002afc:	4651      	mov	r1, sl
 8002afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b02:	4651      	mov	r1, sl
 8002b04:	018a      	lsls	r2, r1, #6
 8002b06:	4651      	mov	r1, sl
 8002b08:	ebb2 0801 	subs.w	r8, r2, r1
 8002b0c:	4659      	mov	r1, fp
 8002b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b26:	4690      	mov	r8, r2
 8002b28:	4699      	mov	r9, r3
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	eb18 0303 	adds.w	r3, r8, r3
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	462b      	mov	r3, r5
 8002b34:	eb49 0303 	adc.w	r3, r9, r3
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b46:	4629      	mov	r1, r5
 8002b48:	024b      	lsls	r3, r1, #9
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b50:	4621      	mov	r1, r4
 8002b52:	024a      	lsls	r2, r1, #9
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b64:	f7fd fb30 	bl	80001c8 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b70:	e058      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	2200      	movs	r2, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b8c:	4642      	mov	r2, r8
 8002b8e:	464b      	mov	r3, r9
 8002b90:	f04f 0000 	mov.w	r0, #0
 8002b94:	f04f 0100 	mov.w	r1, #0
 8002b98:	0159      	lsls	r1, r3, #5
 8002b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9e:	0150      	lsls	r0, r2, #5
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002baa:	4649      	mov	r1, r9
 8002bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	00eb      	lsls	r3, r5, #3
 8002bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bda:	00e2      	lsls	r2, r4, #3
 8002bdc:	4614      	mov	r4, r2
 8002bde:	461d      	mov	r5, r3
 8002be0:	4643      	mov	r3, r8
 8002be2:	18e3      	adds	r3, r4, r3
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	464b      	mov	r3, r9
 8002be8:	eb45 0303 	adc.w	r3, r5, r3
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	028b      	lsls	r3, r1, #10
 8002bfe:	4621      	mov	r1, r4
 8002c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c04:	4621      	mov	r1, r4
 8002c06:	028a      	lsls	r2, r1, #10
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	61fa      	str	r2, [r7, #28]
 8002c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c18:	f7fd fad6 	bl	80001c8 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4613      	mov	r3, r2
 8002c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3750      	adds	r7, #80	; 0x50
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	00f42400 	.word	0x00f42400
 8002c5c:	007a1200 	.word	0x007a1200

08002c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07b      	b.n	8002d6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c82:	d009      	beq.n	8002c98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
 8002c8a:	e005      	b.n	8002c98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe f82e 	bl	8000d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	ea42 0103 	orr.w	r1, r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0104 	and.w	r1, r3, #4
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	f003 0210 	and.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_SPI_TransmitReceive_IT+0x20>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e075      	b.n	8002e80 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002daa:	7dbb      	ldrb	r3, [r7, #22]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d00d      	beq.n	8002dcc <HAL_SPI_TransmitReceive_IT+0x58>
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db6:	d106      	bne.n	8002dc6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <HAL_SPI_TransmitReceive_IT+0x52>
 8002dc0:	7dbb      	ldrb	r3, [r7, #22]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d002      	beq.n	8002dcc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dca:	e054      	b.n	8002e76 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_SPI_TransmitReceive_IT+0x6a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_SPI_TransmitReceive_IT+0x6a>
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002de2:	e048      	b.n	8002e76 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d003      	beq.n	8002df8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2205      	movs	r2, #5
 8002df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	887a      	ldrh	r2, [r7, #2]
 8002e1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <HAL_SPI_TransmitReceive_IT+0x118>)
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
 8002e36:	e005      	b.n	8002e44 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <HAL_SPI_TransmitReceive_IT+0x124>)
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002e52:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d008      	beq.n	8002e74 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e000      	b.n	8002e76 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002e74:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	08003371 	.word	0x08003371
 8002e90:	080033d1 	.word	0x080033d1
 8002e94:	080032ad 	.word	0x080032ad
 8002e98:	08003311 	.word	0x08003311

08002e9c <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002ea8:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <HAL_SPI_Abort+0x1c8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a6e      	ldr	r2, [pc, #440]	; (8003068 <HAL_SPI_Abort+0x1cc>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0a5b      	lsrs	r3, r3, #9
 8002eb4:	2264      	movs	r2, #100	; 0x64
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0220 	bic.w	r2, r2, #32
 8002ece:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d117      	bne.n	8002f0e <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a62      	ldr	r2, [pc, #392]	; (800306c <HAL_SPI_Abort+0x1d0>)
 8002ee2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002ef6:	e008      	b.n	8002f0a <HAL_SPI_Abort+0x6e>
      }
      count--;
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b07      	cmp	r3, #7
 8002f08:	d1ec      	bne.n	8002ee4 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d117      	bne.n	8002f4c <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a54      	ldr	r2, [pc, #336]	; (8003070 <HAL_SPI_Abort+0x1d4>)
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002f34:	e008      	b.n	8002f48 <HAL_SPI_Abort+0xac>
      }
      count--;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b07      	cmp	r3, #7
 8002f46:	d1ec      	bne.n	8002f22 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d12e      	bne.n	8002fb8 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d02a      	beq.n	8002fb8 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f66:	2200      	movs	r2, #0
 8002f68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe ffc9 	bl	8001f06 <HAL_DMA_Abort>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2240      	movs	r2, #64	; 0x40
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0202 	bic.w	r2, r2, #2
 8002f8e:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8002fa2:	e009      	b.n	8002fb8 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0eb      	beq.n	8002f90 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d122      	bne.n	800300c <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01e      	beq.n	800300c <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe ff93 	bl	8001f06 <HAL_DMA_Abort>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2240      	movs	r2, #64	; 0x40
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d102      	bne.n	8003026 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e002      	b.n	800302c <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8003058:	7ffb      	ldrb	r3, [r7, #31]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000000 	.word	0x20000000
 8003068:	057619f1 	.word	0x057619f1
 800306c:	0800373d 	.word	0x0800373d
 8003070:	080036ad 	.word	0x080036ad

08003074 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10e      	bne.n	80030b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
    return;
 80030b2:	e0ce      	b.n	8003252 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_SPI_IRQHandler+0x5e>
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
    return;
 80030d0:	e0bf      	b.n	8003252 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <HAL_SPI_IRQHandler+0x7e>
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80b0 	beq.w	8003252 <HAL_SPI_IRQHandler+0x1de>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80aa 	beq.w	8003252 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d023      	beq.n	8003150 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b03      	cmp	r3, #3
 8003112:	d011      	beq.n	8003138 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	f043 0204 	orr.w	r2, r3, #4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	e00b      	b.n	8003150 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]
        return;
 800314e:	e080      	b.n	8003252 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d014      	beq.n	8003184 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f043 0208 	orr.w	r2, r3, #8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d04f      	beq.n	8003250 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031be:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <HAL_SPI_IRQHandler+0x168>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d034      	beq.n	8003246 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0203 	bic.w	r2, r2, #3
 80031ea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d011      	beq.n	8003218 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f8:	4a17      	ldr	r2, [pc, #92]	; (8003258 <HAL_SPI_IRQHandler+0x1e4>)
 80031fa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fef0 	bl	8001fe6 <HAL_DMA_Abort_IT>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321c:	2b00      	cmp	r3, #0
 800321e:	d016      	beq.n	800324e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <HAL_SPI_IRQHandler+0x1e4>)
 8003226:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe feda 	bl	8001fe6 <HAL_DMA_Abort_IT>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003244:	e003      	b.n	800324e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f812 	bl	8003270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800324c:	e000      	b.n	8003250 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800324e:	bf00      	nop
    return;
 8003250:	bf00      	nop
  }
}
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	08003285 	.word	0x08003285

0800325c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff ffe6 	bl	8003270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f103 020c 	add.w	r2, r3, #12
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10f      	bne.n	8003308 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032f6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f95e 	bl	80035c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10f      	bne.n	8003368 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003356:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f92e 	bl	80035c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	b292      	uxth	r2, r2
 8003384:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	1c9a      	adds	r2, r3, #2
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10f      	bne.n	80033c8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8fe 	bl	80035c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003414:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f8cf 	bl	80035c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003440:	f7fe fc70 	bl	8001d24 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4413      	add	r3, r2
 800344e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003450:	f7fe fc68 	bl	8001d24 <HAL_GetTick>
 8003454:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003456:	4b39      	ldr	r3, [pc, #228]	; (800353c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	015b      	lsls	r3, r3, #5
 800345c:	0d1b      	lsrs	r3, r3, #20
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003466:	e054      	b.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d050      	beq.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003470:	f7fe fc58 	bl	8001d24 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	429a      	cmp	r2, r3
 800347e:	d902      	bls.n	8003486 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d13d      	bne.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003494:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349e:	d111      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a8:	d004      	beq.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b2:	d107      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034cc:	d10f      	bne.n	80034ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e017      	b.n	8003532 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3b01      	subs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d19b      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000000 	.word	0x20000000

08003540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <SPI_EndRxTxTransaction+0x7c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <SPI_EndRxTxTransaction+0x80>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0d5b      	lsrs	r3, r3, #21
 8003558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356a:	d112      	bne.n	8003592 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2200      	movs	r2, #0
 8003574:	2180      	movs	r1, #128	; 0x80
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff ff5a 	bl	8003430 <SPI_WaitFlagStateUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e00f      	b.n	80035b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3b01      	subs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d0f2      	beq.n	8003592 <SPI_EndRxTxTransaction+0x52>
 80035ac:	e000      	b.n	80035b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035ae:	bf00      	nop
  }

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000000 	.word	0x20000000
 80035c0:	165e9f81 	.word	0x165e9f81

080035c4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80035cc:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <SPI_CloseRxTx_ISR+0xe0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a35      	ldr	r2, [pc, #212]	; (80036a8 <SPI_CloseRxTx_ISR+0xe4>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	0a5b      	lsrs	r3, r3, #9
 80035d8:	2264      	movs	r2, #100	; 0x64
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035e0:	f7fe fba0 	bl	8001d24 <HAL_GetTick>
 80035e4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0220 	bic.w	r2, r2, #32
 80035f4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d106      	bne.n	800360a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003608:	e009      	b.n	800361e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	3b01      	subs	r3, #1
 800360e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0eb      	beq.n	80035f6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	2164      	movs	r1, #100	; 0x64
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ff8c 	bl	8003540 <SPI_EndRxTxTransaction>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	2b00      	cmp	r3, #0
 800365e:	d115      	bne.n	800368c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b04      	cmp	r3, #4
 800366a:	d107      	bne.n	800367c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fdf1 	bl	800325c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800367a:	e00e      	b.n	800369a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7fd fa39 	bl	8000afc <HAL_SPI_TxRxCpltCallback>
}
 800368a:	e006      	b.n	800369a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff fdeb 	bl	8003270 <HAL_SPI_ErrorCallback>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000000 	.word	0x20000000
 80036a8:	057619f1 	.word	0x057619f1

080036ac <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80036b8:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <SPI_AbortRx_ISR+0x88>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <SPI_AbortRx_ISR+0x8c>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0a5b      	lsrs	r3, r3, #9
 80036c4:	2264      	movs	r2, #100	; 0x64
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036de:	e009      	b.n	80036f4 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0eb      	beq.n	80036cc <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003702:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003712:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800371c:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2207      	movs	r2, #7
 8003722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000000 	.word	0x20000000
 8003738:	057619f1 	.word	0x057619f1

0800373c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003752:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003762:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2207      	movs	r2, #7
 8003768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e041      	b.n	800380e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe f9c2 	bl	8001b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f000 fad8 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e041      	b.n	80038ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f839 	bl	80038b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f000 fa89 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_TIM_PWM_Start+0x24>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e022      	b.n	8003932 <HAL_TIM_PWM_Start+0x6a>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d109      	bne.n	8003906 <HAL_TIM_PWM_Start+0x3e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e015      	b.n	8003932 <HAL_TIM_PWM_Start+0x6a>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d109      	bne.n	8003920 <HAL_TIM_PWM_Start+0x58>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e008      	b.n	8003932 <HAL_TIM_PWM_Start+0x6a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	bf14      	ite	ne
 800392c:	2301      	movne	r3, #1
 800392e:	2300      	moveq	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e07c      	b.n	8003a34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start+0x82>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003948:	e013      	b.n	8003972 <HAL_TIM_PWM_Start+0xaa>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d104      	bne.n	800395a <HAL_TIM_PWM_Start+0x92>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	e00b      	b.n	8003972 <HAL_TIM_PWM_Start+0xaa>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start+0xa2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003968:	e003      	b.n	8003972 <HAL_TIM_PWM_Start+0xaa>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	6839      	ldr	r1, [r7, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fce0 	bl	8004340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <HAL_TIM_PWM_Start+0x174>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_TIM_PWM_Start+0xcc>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2c      	ldr	r2, [pc, #176]	; (8003a40 <HAL_TIM_PWM_Start+0x178>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d101      	bne.n	8003998 <HAL_TIM_PWM_Start+0xd0>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_TIM_PWM_Start+0xd2>
 8003998:	2300      	movs	r3, #0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <HAL_TIM_PWM_Start+0x174>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <HAL_TIM_PWM_Start+0x136>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d01d      	beq.n	80039fe <HAL_TIM_PWM_Start+0x136>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <HAL_TIM_PWM_Start+0x17c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d018      	beq.n	80039fe <HAL_TIM_PWM_Start+0x136>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_TIM_PWM_Start+0x180>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_TIM_PWM_Start+0x136>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_TIM_PWM_Start+0x184>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00e      	beq.n	80039fe <HAL_TIM_PWM_Start+0x136>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_TIM_PWM_Start+0x178>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_TIM_PWM_Start+0x136>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <HAL_TIM_PWM_Start+0x188>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIM_PWM_Start+0x136>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <HAL_TIM_PWM_Start+0x18c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d111      	bne.n	8003a22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b06      	cmp	r3, #6
 8003a0e:	d010      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a20:	e007      	b.n	8003a32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40010000 	.word	0x40010000
 8003a40:	40010400 	.word	0x40010400
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40000c00 	.word	0x40000c00
 8003a50:	40014000 	.word	0x40014000
 8003a54:	40001800 	.word	0x40001800

08003a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0ae      	b.n	8003bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	f200 809f 	bhi.w	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003bc5 	.word	0x08003bc5
 8003a94:	08003bc5 	.word	0x08003bc5
 8003a98:	08003bc5 	.word	0x08003bc5
 8003a9c:	08003b01 	.word	0x08003b01
 8003aa0:	08003bc5 	.word	0x08003bc5
 8003aa4:	08003bc5 	.word	0x08003bc5
 8003aa8:	08003bc5 	.word	0x08003bc5
 8003aac:	08003b43 	.word	0x08003b43
 8003ab0:	08003bc5 	.word	0x08003bc5
 8003ab4:	08003bc5 	.word	0x08003bc5
 8003ab8:	08003bc5 	.word	0x08003bc5
 8003abc:	08003b83 	.word	0x08003b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f9f0 	bl	8003eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0208 	orr.w	r2, r2, #8
 8003ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0204 	bic.w	r2, r2, #4
 8003aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6999      	ldr	r1, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	619a      	str	r2, [r3, #24]
      break;
 8003afe:	e064      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa40 	bl	8003f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	021a      	lsls	r2, r3, #8
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	619a      	str	r2, [r3, #24]
      break;
 8003b40:	e043      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fa95 	bl	8004078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0208 	orr.w	r2, r2, #8
 8003b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0204 	bic.w	r2, r2, #4
 8003b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]
      break;
 8003b80:	e023      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fae9 	bl	8004160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	021a      	lsls	r2, r3, #8
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	61da      	str	r2, [r3, #28]
      break;
 8003bc2:	e002      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0b4      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x186>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c30:	d03e      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c36:	f200 8087 	bhi.w	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	f000 8086 	beq.w	8003d4e <HAL_TIM_ConfigClockSource+0x172>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d87f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b70      	cmp	r3, #112	; 0x70
 8003c4a:	d01a      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0xa6>
 8003c4c:	2b70      	cmp	r3, #112	; 0x70
 8003c4e:	d87b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b60      	cmp	r3, #96	; 0x60
 8003c52:	d050      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c54:	2b60      	cmp	r3, #96	; 0x60
 8003c56:	d877      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b50      	cmp	r3, #80	; 0x50
 8003c5a:	d03c      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c5c:	2b50      	cmp	r3, #80	; 0x50
 8003c5e:	d873      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d058      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x13a>
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d86f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b30      	cmp	r3, #48	; 0x30
 8003c6a:	d064      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c6c:	2b30      	cmp	r3, #48	; 0x30
 8003c6e:	d86b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d060      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d867      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05c      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d05a      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c80:	e062      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6899      	ldr	r1, [r3, #8]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f000 fb35 	bl	8004300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	609a      	str	r2, [r3, #8]
      break;
 8003cae:	e04f      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f000 fb1e 	bl	8004300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd2:	609a      	str	r2, [r3, #8]
      break;
 8003cd4:	e03c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 fa92 	bl	800420c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2150      	movs	r1, #80	; 0x50
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 faeb 	bl	80042ca <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e02c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f000 fab1 	bl	800426a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2160      	movs	r1, #96	; 0x60
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fadb 	bl	80042ca <TIM_ITRx_SetConfig>
      break;
 8003d14:	e01c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 fa72 	bl	800420c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 facb 	bl	80042ca <TIM_ITRx_SetConfig>
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f000 fac2 	bl	80042ca <TIM_ITRx_SetConfig>
      break;
 8003d46:	e003      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a40      	ldr	r2, [pc, #256]	; (8003e80 <TIM_Base_SetConfig+0x114>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d00f      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3d      	ldr	r2, [pc, #244]	; (8003e84 <TIM_Base_SetConfig+0x118>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00b      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <TIM_Base_SetConfig+0x11c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3b      	ldr	r2, [pc, #236]	; (8003e8c <TIM_Base_SetConfig+0x120>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3a      	ldr	r2, [pc, #232]	; (8003e90 <TIM_Base_SetConfig+0x124>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d108      	bne.n	8003dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <TIM_Base_SetConfig+0x114>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02b      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d027      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	; (8003e84 <TIM_Base_SetConfig+0x118>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d023      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <TIM_Base_SetConfig+0x11c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01f      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <TIM_Base_SetConfig+0x120>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01b      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <TIM_Base_SetConfig+0x124>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d017      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a28      	ldr	r2, [pc, #160]	; (8003e94 <TIM_Base_SetConfig+0x128>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <TIM_Base_SetConfig+0x12c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00f      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <TIM_Base_SetConfig+0x130>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <TIM_Base_SetConfig+0x134>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <TIM_Base_SetConfig+0x138>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a23      	ldr	r2, [pc, #140]	; (8003ea8 <TIM_Base_SetConfig+0x13c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d108      	bne.n	8003e30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_Base_SetConfig+0xf8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <TIM_Base_SetConfig+0x124>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d103      	bne.n	8003e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	615a      	str	r2, [r3, #20]
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40010000 	.word	0x40010000
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40000800 	.word	0x40000800
 8003e8c:	40000c00 	.word	0x40000c00
 8003e90:	40010400 	.word	0x40010400
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800
 8003ea0:	40001800 	.word	0x40001800
 8003ea4:	40001c00 	.word	0x40001c00
 8003ea8:	40002000 	.word	0x40002000

08003eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f023 0302 	bic.w	r3, r3, #2
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <TIM_OC1_SetConfig+0xd8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_OC1_SetConfig+0x64>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <TIM_OC1_SetConfig+0xdc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d10c      	bne.n	8003f2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0308 	bic.w	r3, r3, #8
 8003f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 0304 	bic.w	r3, r3, #4
 8003f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <TIM_OC1_SetConfig+0xd8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_OC1_SetConfig+0x8e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <TIM_OC1_SetConfig+0xdc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	621a      	str	r2, [r3, #32]
}
 8003f78:	bf00      	nop
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40010400 	.word	0x40010400

08003f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0210 	bic.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0320 	bic.w	r3, r3, #32
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a22      	ldr	r2, [pc, #136]	; (8004070 <TIM_OC2_SetConfig+0xe4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_OC2_SetConfig+0x68>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a21      	ldr	r2, [pc, #132]	; (8004074 <TIM_OC2_SetConfig+0xe8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d10d      	bne.n	8004010 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a17      	ldr	r2, [pc, #92]	; (8004070 <TIM_OC2_SetConfig+0xe4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_OC2_SetConfig+0x94>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a16      	ldr	r2, [pc, #88]	; (8004074 <TIM_OC2_SetConfig+0xe8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d113      	bne.n	8004048 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800402e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40010000 	.word	0x40010000
 8004074:	40010400 	.word	0x40010400

08004078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a21      	ldr	r2, [pc, #132]	; (8004158 <TIM_OC3_SetConfig+0xe0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_OC3_SetConfig+0x66>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a20      	ldr	r2, [pc, #128]	; (800415c <TIM_OC3_SetConfig+0xe4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10d      	bne.n	80040fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a16      	ldr	r2, [pc, #88]	; (8004158 <TIM_OC3_SetConfig+0xe0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_OC3_SetConfig+0x92>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a15      	ldr	r2, [pc, #84]	; (800415c <TIM_OC3_SetConfig+0xe4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d113      	bne.n	8004132 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	621a      	str	r2, [r3, #32]
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	40010000 	.word	0x40010000
 800415c:	40010400 	.word	0x40010400

08004160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	031b      	lsls	r3, r3, #12
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <TIM_OC4_SetConfig+0xa4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_OC4_SetConfig+0x68>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a11      	ldr	r2, [pc, #68]	; (8004208 <TIM_OC4_SetConfig+0xa8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d109      	bne.n	80041dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	621a      	str	r2, [r3, #32]
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40010000 	.word	0x40010000
 8004208:	40010400 	.word	0x40010400

0800420c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f023 0201 	bic.w	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f023 030a 	bic.w	r3, r3, #10
 8004248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800426a:	b480      	push	{r7}
 800426c:	b087      	sub	sp, #28
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f023 0210 	bic.w	r2, r3, #16
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	031b      	lsls	r3, r3, #12
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f043 0307 	orr.w	r3, r3, #7
 80042ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	609a      	str	r2, [r3, #8]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800431a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	021a      	lsls	r2, r3, #8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	431a      	orrs	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2201      	movs	r2, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1a      	ldr	r2, [r3, #32]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	43db      	mvns	r3, r3
 8004362:	401a      	ands	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	fa01 f303 	lsl.w	r3, r1, r3
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e05a      	b.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a21      	ldr	r2, [pc, #132]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d01d      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1d      	ldr	r2, [pc, #116]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1a      	ldr	r2, [pc, #104]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a18      	ldr	r2, [pc, #96]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a17      	ldr	r2, [pc, #92]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a15      	ldr	r2, [pc, #84]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10c      	bne.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4313      	orrs	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010000 	.word	0x40010000
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40010400 	.word	0x40010400
 800447c:	40014000 	.word	0x40014000
 8004480:	40001800 	.word	0x40001800

08004484 <memset>:
 8004484:	4402      	add	r2, r0
 8004486:	4603      	mov	r3, r0
 8004488:	4293      	cmp	r3, r2
 800448a:	d100      	bne.n	800448e <memset+0xa>
 800448c:	4770      	bx	lr
 800448e:	f803 1b01 	strb.w	r1, [r3], #1
 8004492:	e7f9      	b.n	8004488 <memset+0x4>

08004494 <__libc_init_array>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4d0d      	ldr	r5, [pc, #52]	; (80044cc <__libc_init_array+0x38>)
 8004498:	4c0d      	ldr	r4, [pc, #52]	; (80044d0 <__libc_init_array+0x3c>)
 800449a:	1b64      	subs	r4, r4, r5
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	2600      	movs	r6, #0
 80044a0:	42a6      	cmp	r6, r4
 80044a2:	d109      	bne.n	80044b8 <__libc_init_array+0x24>
 80044a4:	4d0b      	ldr	r5, [pc, #44]	; (80044d4 <__libc_init_array+0x40>)
 80044a6:	4c0c      	ldr	r4, [pc, #48]	; (80044d8 <__libc_init_array+0x44>)
 80044a8:	f000 f818 	bl	80044dc <_init>
 80044ac:	1b64      	subs	r4, r4, r5
 80044ae:	10a4      	asrs	r4, r4, #2
 80044b0:	2600      	movs	r6, #0
 80044b2:	42a6      	cmp	r6, r4
 80044b4:	d105      	bne.n	80044c2 <__libc_init_array+0x2e>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044bc:	4798      	blx	r3
 80044be:	3601      	adds	r6, #1
 80044c0:	e7ee      	b.n	80044a0 <__libc_init_array+0xc>
 80044c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c6:	4798      	blx	r3
 80044c8:	3601      	adds	r6, #1
 80044ca:	e7f2      	b.n	80044b2 <__libc_init_array+0x1e>
 80044cc:	08004540 	.word	0x08004540
 80044d0:	08004540 	.word	0x08004540
 80044d4:	08004540 	.word	0x08004540
 80044d8:	08004544 	.word	0x08004544

080044dc <_init>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	bf00      	nop
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr

080044e8 <_fini>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr
